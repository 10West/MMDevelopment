// Generated from Formula.g4 by ANTLR 4.5.3
// jshint ignore: start
var antlr4 = require('antlr4/index');
var FormulaListener = require('FormulaParser/FormulaListener').FormulaListener;

var grammarFileName = "Formula.tokens";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u00033\u0299\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0003\u0002\u0007\u0002^\n\u0002\f\u0002\u000e",
    "\u0002a\u000b\u0002\u0003\u0002\u0003\u0002\u0006\u0002e\n\u0002\r\u0002",
    "\u000e\u0002f\u0003\u0002\u0005\u0002j\n\u0002\u0007\u0002l\n\u0002",
    "\f\u0002\u000e\u0002o\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003w\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0006\u0005~\n\u0005",
    "\r\u0005\u000e\u0005\u007f\u0007\u0005\u0082\n\u0005\f\u0005\u000e\u0005",
    "\u0085\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0006",
    "\u0006\u008b\n\u0006\r\u0006\u000e\u0006\u008c\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0006\u0006\u0095\n",
    "\u0006\r\u0006\u000e\u0006\u0096\u0003\u0006\u0003\u0006\u0007\u0006",
    "\u009b\n\u0006\f\u0006\u000e\u0006\u009e\u000b\u0006\u0003\u0006\u0003",
    "\u0006\u0006\u0006\u00a2\n\u0006\r\u0006\u000e\u0006\u00a3\u0003\u0006",
    "\u0005\u0006\u00a7\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0007\u0007\u00b4\n\u0007\f\u0007\u000e\u0007\u00b7",
    "\u000b\u0007\u0005\u0007\u00b9\n\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\u0007\u0007\u0007\u00bf\n\u0007\f\u0007\u000e\u0007\u00c2",
    "\u000b\u0007\u0005\u0007\u00c4\n\u0007\u0003\u0007\u0003\u0007\u0006",
    "\u0007\u00c8\n\u0007\r\u0007\u000e\u0007\u00c9\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0007\b\u00d7\n\b\f\b\u000e\b\u00da\u000b\b\u0005\b\u00dc",
    "\n\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00e2\n\b\f\b\u000e\b\u00e5",
    "\u000b\b\u0005\b\u00e7\n\b\u0003\b\u0003\b\u0006\b\u00eb\n\b\r\b\u000e",
    "\b\u00ec\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u00f4\n\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007\t\u00fd\n\t",
    "\f\t\u000e\t\u0100\u000b\t\u0005\t\u0102\n\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0007\t\u0108\n\t\f\t\u000e\t\u010b\u000b\t\u0005\t\u010d\n",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u0114\n\t\u0003\t",
    "\u0003\t\u0003\t\u0005\t\u0119\n\t\u0007\t\u011b\n\t\f\t\u000e\t\u011e",
    "\u000b\t\u0003\t\u0003\t\u0005\t\u0122\n\t\u0003\n\u0003\n\u0005\n\u0126",
    "\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u012b\n\u000b\f",
    "\u000b\u000e\u000b\u012e\u000b\u000b\u0003\f\u0003\f\u0003\f\u0007\f",
    "\u0133\n\f\f\f\u000e\f\u0136\u000b\f\u0003\r\u0003\r\u0003\r\u0007\r",
    "\u013b\n\r\f\r\u000e\r\u013e\u000b\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0007\u000e\u0143\n\u000e\f\u000e\u000e\u000e\u0146\u000b\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u014b\n\u000f\f\u000f\u000e",
    "\u000f\u014e\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u0153\n\u0010\f\u0010\u000e\u0010\u0156\u000b\u0010\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u015b\n\u0011\f\u0011\u000e\u0011\u015e",
    "\u000b\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0163\n",
    "\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0167\n\u0012\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u016c\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0007\u0014\u0171\n\u0014\f\u0014\u000e\u0014\u0174",
    "\u000b\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0179\n",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u017e\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0185\n\u0018\u0007\u0018\u0187\n\u0018\f\u0018\u000e\u0018\u018a\u000b",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u0190",
    "\n\u0019\f\u0019\u000e\u0019\u0193\u000b\u0019\u0005\u0019\u0195\n\u0019",
    "\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u019e\n\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0005\u001b\u01a9\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u01ae\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0005\u001d\u01b5\n\u001d\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u01b9\n\u001e\f\u001e\u000e\u001e\u01bc\u000b\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u01c0\n\u001e\f\u001e\u000e\u001e\u01c3",
    "\u000b\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01c7\n\u001e\f\u001e",
    "\u000e\u001e\u01ca\u000b\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01ce",
    "\n\u001e\f\u001e\u000e\u001e\u01d1\u000b\u001e\u0007\u001e\u01d3\n\u001e",
    "\f\u001e\u000e\u001e\u01d6\u000b\u001e\u0005\u001e\u01d8\n\u001e\u0003",
    "\u001e\u0007\u001e\u01db\n\u001e\f\u001e\u000e\u001e\u01de\u000b\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01e3\n\u001e\f\u001e",
    "\u000e\u001e\u01e6\u000b\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01ea",
    "\n\u001e\f\u001e\u000e\u001e\u01ed\u000b\u001e\u0003\u001e\u0003\u001e",
    "\u0007\u001e\u01f1\n\u001e\f\u001e\u000e\u001e\u01f4\u000b\u001e\u0003",
    "\u001e\u0003\u001e\u0007\u001e\u01f8\n\u001e\f\u001e\u000e\u001e\u01fb",
    "\u000b\u001e\u0007\u001e\u01fd\n\u001e\f\u001e\u000e\u001e\u0200\u000b",
    "\u001e\u0005\u001e\u0202\n\u001e\u0003\u001e\u0007\u001e\u0205\n\u001e",
    "\f\u001e\u000e\u001e\u0208\u000b\u001e\u0003\u001e\u0005\u001e\u020b",
    "\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u020f\n\u001f\u0003 \u0003",
    " \u0003 \u0005 \u0214\n \u0003 \u0003 \u0003 \u0005 \u0219\n \u0007",
    " \u021b\n \f \u000e \u021e\u000b \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u0224\n \u0003 \u0003 \u0003 \u0005 \u0229\n \u0007 \u022b\n \f \u000e",
    " \u022e\u000b \u0003 \u0005 \u0231\n \u0003!\u0003!\u0006!\u0235\n!",
    "\r!\u000e!\u0236\u0003\"\u0003\"\u0003#\u0003#\u0007#\u023d\n#\f#\u000e",
    "#\u0240\u000b#\u0003#\u0003#\u0005#\u0244\n#\u0003#\u0007#\u0247\n#",
    "\f#\u000e#\u024a\u000b#\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0003",
    "%\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0007(\u025d\n(\f(\u000e(\u0260\u000b(\u0003)\u0003)\u0003",
    ")\u0007)\u0265\n)\f)\u000e)\u0268\u000b)\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0005*\u026f\n*\u0003*\u0005*\u0272\n*\u0003*\u0003*\u0005",
    "*\u0276\n*\u0003*\u0005*\u0279\n*\u0005*\u027b\n*\u0003+\u0003+\u0003",
    "+\u0005+\u0280\n+\u0003+\u0007+\u0283\n+\f+\u000e+\u0286\u000b+\u0003",
    ",\u0003,\u0007,\u028a\n,\f,\u000e,\u028d\u000b,\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u0293\n,\u0003-\u0003-\u0003.\u0003.\u0003.\u0002\u0002",
    "/\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\u0002\n\u0003\u0002\u0013",
    "\u0014\u0003\u0002\u0015\u0018\u0003\u0002\u0019\u001a\u0003\u0002\u001b",
    "\u001d\u0005\u0002\u001b\u001b++33\u0003\u0002$%\u0003\u0002&\'\u0003",
    "\u0002\u001b\u001c\u02d2\u0002_\u0003\u0002\u0002\u0002\u0004v\u0003",
    "\u0002\u0002\u0002\u0006x\u0003\u0002\u0002\u0002\b\u0083\u0003\u0002",
    "\u0002\u0002\n\u0086\u0003\u0002\u0002\u0002\f\u00ab\u0003\u0002\u0002",
    "\u0002\u000e\u00cf\u0003\u0002\u0002\u0002\u0010\u0121\u0003\u0002\u0002",
    "\u0002\u0012\u0123\u0003\u0002\u0002\u0002\u0014\u0127\u0003\u0002\u0002",
    "\u0002\u0016\u012f\u0003\u0002\u0002\u0002\u0018\u0137\u0003\u0002\u0002",
    "\u0002\u001a\u013f\u0003\u0002\u0002\u0002\u001c\u0147\u0003\u0002\u0002",
    "\u0002\u001e\u014f\u0003\u0002\u0002\u0002 \u0157\u0003\u0002\u0002",
    "\u0002\"\u015f\u0003\u0002\u0002\u0002$\u016b\u0003\u0002\u0002\u0002",
    "&\u016d\u0003\u0002\u0002\u0002(\u0178\u0003\u0002\u0002\u0002*\u017d",
    "\u0003\u0002\u0002\u0002,\u017f\u0003\u0002\u0002\u0002.\u0181\u0003",
    "\u0002\u0002\u00020\u018b\u0003\u0002\u0002\u00022\u019d\u0003\u0002",
    "\u0002\u00024\u01a8\u0003\u0002\u0002\u00026\u01aa\u0003\u0002\u0002",
    "\u00028\u01b4\u0003\u0002\u0002\u0002:\u020a\u0003\u0002\u0002\u0002",
    "<\u020e\u0003\u0002\u0002\u0002>\u0230\u0003\u0002\u0002\u0002@\u0234",
    "\u0003\u0002\u0002\u0002B\u0238\u0003\u0002\u0002\u0002D\u0243\u0003",
    "\u0002\u0002\u0002F\u024d\u0003\u0002\u0002\u0002H\u024f\u0003\u0002",
    "\u0002\u0002J\u0252\u0003\u0002\u0002\u0002L\u0254\u0003\u0002\u0002",
    "\u0002N\u0259\u0003\u0002\u0002\u0002P\u0261\u0003\u0002\u0002\u0002",
    "R\u027a\u0003\u0002\u0002\u0002T\u027c\u0003\u0002\u0002\u0002V\u0292",
    "\u0003\u0002\u0002\u0002X\u0294\u0003\u0002\u0002\u0002Z\u0296\u0003",
    "\u0002\u0002\u0002\\^\u0007\b\u0002\u0002]\\\u0003\u0002\u0002\u0002",
    "^a\u0003\u0002\u0002\u0002_]\u0003\u0002\u0002\u0002_`\u0003\u0002\u0002",
    "\u0002`m\u0003\u0002\u0002\u0002a_\u0003\u0002\u0002\u0002bi\u0005\u0004",
    "\u0003\u0002ce\u0007\b\u0002\u0002dc\u0003\u0002\u0002\u0002ef\u0003",
    "\u0002\u0002\u0002fd\u0003\u0002\u0002\u0002fg\u0003\u0002\u0002\u0002",
    "gj\u0003\u0002\u0002\u0002hj\u0007\u0002\u0002\u0003id\u0003\u0002\u0002",
    "\u0002ih\u0003\u0002\u0002\u0002jl\u0003\u0002\u0002\u0002kb\u0003\u0002",
    "\u0002\u0002lo\u0003\u0002\u0002\u0002mk\u0003\u0002\u0002\u0002mn\u0003",
    "\u0002\u0002\u0002np\u0003\u0002\u0002\u0002om\u0003\u0002\u0002\u0002",
    "pq\u0007\u0002\u0002\u0003q\u0003\u0003\u0002\u0002\u0002rw\u0005\u0014",
    "\u000b\u0002sw\u0005\n\u0006\u0002tw\u0005\f\u0007\u0002uw\u0005\u0006",
    "\u0004\u0002vr\u0003\u0002\u0002\u0002vs\u0003\u0002\u0002\u0002vt\u0003",
    "\u0002\u0002\u0002vu\u0003\u0002\u0002\u0002w\u0005\u0003\u0002\u0002",
    "\u0002xy\u0007\u000e\u0002\u0002yz\u0005\u0014\u000b\u0002z\u0007\u0003",
    "\u0002\u0002\u0002{}\u0005\u0004\u0003\u0002|~\u0007\b\u0002\u0002}",
    "|\u0003\u0002\u0002\u0002~\u007f\u0003\u0002\u0002\u0002\u007f}\u0003",
    "\u0002\u0002\u0002\u007f\u0080\u0003\u0002\u0002\u0002\u0080\u0082\u0003",
    "\u0002\u0002\u0002\u0081{\u0003\u0002\u0002\u0002\u0082\u0085\u0003",
    "\u0002\u0002\u0002\u0083\u0081\u0003\u0002\u0002\u0002\u0083\u0084\u0003",
    "\u0002\u0002\u0002\u0084\t\u0003\u0002\u0002\u0002\u0085\u0083\u0003",
    "\u0002\u0002\u0002\u0086\u0087\u0007\t\u0002\u0002\u0087\u0088\u0005",
    "\u0014\u000b\u0002\u0088\u008a\u0007\n\u0002\u0002\u0089\u008b\u0007",
    "\b\u0002\u0002\u008a\u0089\u0003\u0002\u0002\u0002\u008b\u008c\u0003",
    "\u0002\u0002\u0002\u008c\u008a\u0003\u0002\u0002\u0002\u008c\u008d\u0003",
    "\u0002\u0002\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e\u009c\u0005",
    "\b\u0005\u0002\u008f\u0090\u0007\u000b\u0002\u0002\u0090\u0091\u0007",
    "\t\u0002\u0002\u0091\u0092\u0005\u0014\u000b\u0002\u0092\u0094\u0007",
    "\n\u0002\u0002\u0093\u0095\u0007\b\u0002\u0002\u0094\u0093\u0003\u0002",
    "\u0002\u0002\u0095\u0096\u0003\u0002\u0002\u0002\u0096\u0094\u0003\u0002",
    "\u0002\u0002\u0096\u0097\u0003\u0002\u0002\u0002\u0097\u0098\u0003\u0002",
    "\u0002\u0002\u0098\u0099\u0005\b\u0005\u0002\u0099\u009b\u0003\u0002",
    "\u0002\u0002\u009a\u008f\u0003\u0002\u0002\u0002\u009b\u009e\u0003\u0002",
    "\u0002\u0002\u009c\u009a\u0003\u0002\u0002\u0002\u009c\u009d\u0003\u0002",
    "\u0002\u0002\u009d\u00a6\u0003\u0002\u0002\u0002\u009e\u009c\u0003\u0002",
    "\u0002\u0002\u009f\u00a1\u0007\u000b\u0002\u0002\u00a0\u00a2\u0007\b",
    "\u0002\u0002\u00a1\u00a0\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002",
    "\u0002\u0002\u00a3\u00a1\u0003\u0002\u0002\u0002\u00a3\u00a4\u0003\u0002",
    "\u0002\u0002\u00a4\u00a5\u0003\u0002\u0002\u0002\u00a5\u00a7\u0005\b",
    "\u0005\u0002\u00a6\u009f\u0003\u0002\u0002\u0002\u00a6\u00a7\u0003\u0002",
    "\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002\u00a8\u00a9\u0007\r",
    "\u0002\u0002\u00a9\u00aa\u0007\t\u0002\u0002\u00aa\u000b\u0003\u0002",
    "\u0002\u0002\u00ab\u00ac\u0007\f\u0002\u0002\u00ac\u00ad\u0007+\u0002",
    "\u0002\u00ad\u00c3\u0007\u0003\u0002\u0002\u00ae\u00b8\u0007+\u0002",
    "\u0002\u00af\u00b0\u0007\u0013\u0002\u0002\u00b0\u00b9\u00058\u001d",
    "\u0002\u00b1\u00b2\u00072\u0002\u0002\u00b2\u00b4\u0007+\u0002\u0002",
    "\u00b3\u00b1\u0003\u0002\u0002\u0002\u00b4\u00b7\u0003\u0002\u0002\u0002",
    "\u00b5\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002",
    "\u00b6\u00b9\u0003\u0002\u0002\u0002\u00b7\u00b5\u0003\u0002\u0002\u0002",
    "\u00b8\u00af\u0003\u0002\u0002\u0002\u00b8\u00b5\u0003\u0002\u0002\u0002",
    "\u00b9\u00c0\u0003\u0002\u0002\u0002\u00ba\u00bb\u00072\u0002\u0002",
    "\u00bb\u00bc\u0007+\u0002\u0002\u00bc\u00bd\u0007\u0013\u0002\u0002",
    "\u00bd\u00bf\u00058\u001d\u0002\u00be\u00ba\u0003\u0002\u0002\u0002",
    "\u00bf\u00c2\u0003\u0002\u0002\u0002\u00c0\u00be\u0003\u0002\u0002\u0002",
    "\u00c0\u00c1\u0003\u0002\u0002\u0002\u00c1\u00c4\u0003\u0002\u0002\u0002",
    "\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c3\u00ae\u0003\u0002\u0002\u0002",
    "\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u00c5\u0003\u0002\u0002\u0002",
    "\u00c5\u00c7\u0007\u0004\u0002\u0002\u00c6\u00c8\u0007\b\u0002\u0002",
    "\u00c7\u00c6\u0003\u0002\u0002\u0002\u00c8\u00c9\u0003\u0002\u0002\u0002",
    "\u00c9\u00c7\u0003\u0002\u0002\u0002\u00c9\u00ca\u0003\u0002\u0002\u0002",
    "\u00ca\u00cb\u0003\u0002\u0002\u0002\u00cb\u00cc\u0005\b\u0005\u0002",
    "\u00cc\u00cd\u0007\r\u0002\u0002\u00cd\u00ce\u0007\f\u0002\u0002\u00ce",
    "\r\u0003\u0002\u0002\u0002\u00cf\u00d0\u0007\f\u0002\u0002\u00d0\u00e6",
    "\u0007\u0003\u0002\u0002\u00d1\u00db\u0007+\u0002\u0002\u00d2\u00d3",
    "\u0007\u0013\u0002\u0002\u00d3\u00dc\u00058\u001d\u0002\u00d4\u00d5",
    "\u00072\u0002\u0002\u00d5\u00d7\u0007+\u0002\u0002\u00d6\u00d4\u0003",
    "\u0002\u0002\u0002\u00d7\u00da\u0003\u0002\u0002\u0002\u00d8\u00d6\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u0003\u0002\u0002\u0002\u00d9\u00dc\u0003",
    "\u0002\u0002\u0002\u00da\u00d8\u0003\u0002\u0002\u0002\u00db\u00d2\u0003",
    "\u0002\u0002\u0002\u00db\u00d8\u0003\u0002\u0002\u0002\u00dc\u00e3\u0003",
    "\u0002\u0002\u0002\u00dd\u00de\u00072\u0002\u0002\u00de\u00df\u0007",
    "+\u0002\u0002\u00df\u00e0\u0007\u0013\u0002\u0002\u00e0\u00e2\u0005",
    "8\u001d\u0002\u00e1\u00dd\u0003\u0002\u0002\u0002\u00e2\u00e5\u0003",
    "\u0002\u0002\u0002\u00e3\u00e1\u0003\u0002\u0002\u0002\u00e3\u00e4\u0003",
    "\u0002\u0002\u0002\u00e4\u00e7\u0003\u0002\u0002\u0002\u00e5\u00e3\u0003",
    "\u0002\u0002\u0002\u00e6\u00d1\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003",
    "\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8\u00f3\u0007",
    "\u0004\u0002\u0002\u00e9\u00eb\u0007\b\u0002\u0002\u00ea\u00e9\u0003",
    "\u0002\u0002\u0002\u00eb\u00ec\u0003\u0002\u0002\u0002\u00ec\u00ea\u0003",
    "\u0002\u0002\u0002\u00ec\u00ed\u0003\u0002\u0002\u0002\u00ed\u00ee\u0003",
    "\u0002\u0002\u0002\u00ee\u00ef\u0005\b\u0005\u0002\u00ef\u00f0\u0007",
    "\r\u0002\u0002\u00f0\u00f1\u0007\f\u0002\u0002\u00f1\u00f4\u0003\u0002",
    "\u0002\u0002\u00f2\u00f4\u0005\u0004\u0003\u0002\u00f3\u00ea\u0003\u0002",
    "\u0002\u0002\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f4\u000f\u0003\u0002",
    "\u0002\u0002\u00f5\u00f6\u0007+\u0002\u0002\u00f6\u010c\u0007\u0003",
    "\u0002\u0002\u00f7\u0101\u0007+\u0002\u0002\u00f8\u00f9\u0007\u0013",
    "\u0002\u0002\u00f9\u0102\u00058\u001d\u0002\u00fa\u00fb\u00072\u0002",
    "\u0002\u00fb\u00fd\u0007+\u0002\u0002\u00fc\u00fa\u0003\u0002\u0002",
    "\u0002\u00fd\u0100\u0003\u0002\u0002\u0002\u00fe\u00fc\u0003\u0002\u0002",
    "\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff\u0102\u0003\u0002\u0002",
    "\u0002\u0100\u00fe\u0003\u0002\u0002\u0002\u0101\u00f8\u0003\u0002\u0002",
    "\u0002\u0101\u00fe\u0003\u0002\u0002\u0002\u0102\u0109\u0003\u0002\u0002",
    "\u0002\u0103\u0104\u00072\u0002\u0002\u0104\u0105\u0007+\u0002\u0002",
    "\u0105\u0106\u0007\u0013\u0002\u0002\u0106\u0108\u00058\u001d\u0002",
    "\u0107\u0103\u0003\u0002\u0002\u0002\u0108\u010b\u0003\u0002\u0002\u0002",
    "\u0109\u0107\u0003\u0002\u0002\u0002\u0109\u010a\u0003\u0002\u0002\u0002",
    "\u010a\u010d\u0003\u0002\u0002\u0002\u010b\u0109\u0003\u0002\u0002\u0002",
    "\u010c\u00f7\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002",
    "\u010d\u010e\u0003\u0002\u0002\u0002\u010e\u010f\u0007\u0004\u0002\u0002",
    "\u010f\u0110\u0007\u0005\u0002\u0002\u0110\u0122\u0005\u0014\u000b\u0002",
    "\u0111\u0114\u0007,\u0002\u0002\u0112\u0114\u0005\u0012\n\u0002\u0113",
    "\u0111\u0003\u0002\u0002\u0002\u0113\u0112\u0003\u0002\u0002\u0002\u0114",
    "\u011c\u0003\u0002\u0002\u0002\u0115\u0118\u00072\u0002\u0002\u0116",
    "\u0119\u0007,\u0002\u0002\u0117\u0119\u0005\u0012\n\u0002\u0118\u0116",
    "\u0003\u0002\u0002\u0002\u0118\u0117\u0003\u0002\u0002\u0002\u0119\u011b",
    "\u0003\u0002\u0002\u0002\u011a\u0115\u0003\u0002\u0002\u0002\u011b\u011e",
    "\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011c\u011d",
    "\u0003\u0002\u0002\u0002\u011d\u011f\u0003\u0002\u0002\u0002\u011e\u011c",
    "\u0003\u0002\u0002\u0002\u011f\u0120\u0007\u0005\u0002\u0002\u0120\u0122",
    "\u0005\u0014\u000b\u0002\u0121\u00f5\u0003\u0002\u0002\u0002\u0121\u0113",
    "\u0003\u0002\u0002\u0002\u0122\u0011\u0003\u0002\u0002\u0002\u0123\u0125",
    "\u0007+\u0002\u0002\u0124\u0126\u0005<\u001f\u0002\u0125\u0124\u0003",
    "\u0002\u0002\u0002\u0125\u0126\u0003\u0002\u0002\u0002\u0126\u0013\u0003",
    "\u0002\u0002\u0002\u0127\u012c\u0005\u0016\f\u0002\u0128\u0129\u0007",
    "\u0010\u0002\u0002\u0129\u012b\u0005\u0016\f\u0002\u012a\u0128\u0003",
    "\u0002\u0002\u0002\u012b\u012e\u0003\u0002\u0002\u0002\u012c\u012a\u0003",
    "\u0002\u0002\u0002\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u0015\u0003",
    "\u0002\u0002\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012f\u0134\u0005",
    "\u0018\r\u0002\u0130\u0131\u0007\u0011\u0002\u0002\u0131\u0133\u0005",
    "\u0018\r\u0002\u0132\u0130\u0003\u0002\u0002\u0002\u0133\u0136\u0003",
    "\u0002\u0002\u0002\u0134\u0132\u0003\u0002\u0002\u0002\u0134\u0135\u0003",
    "\u0002\u0002\u0002\u0135\u0017\u0003\u0002\u0002\u0002\u0136\u0134\u0003",
    "\u0002\u0002\u0002\u0137\u013c\u0005\u001a\u000e\u0002\u0138\u0139\u0007",
    "\u0012\u0002\u0002\u0139\u013b\u0005\u001a\u000e\u0002\u013a\u0138\u0003",
    "\u0002\u0002\u0002\u013b\u013e\u0003\u0002\u0002\u0002\u013c\u013a\u0003",
    "\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u0019\u0003",
    "\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013f\u0144\u0005",
    "\u001c\u000f\u0002\u0140\u0141\t\u0002\u0002\u0002\u0141\u0143\u0005",
    "\u001c\u000f\u0002\u0142\u0140\u0003\u0002\u0002\u0002\u0143\u0146\u0003",
    "\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0144\u0145\u0003",
    "\u0002\u0002\u0002\u0145\u001b\u0003\u0002\u0002\u0002\u0146\u0144\u0003",
    "\u0002\u0002\u0002\u0147\u014c\u0005\u001e\u0010\u0002\u0148\u0149\t",
    "\u0003\u0002\u0002\u0149\u014b\u0005\u001e\u0010\u0002\u014a\u0148\u0003",
    "\u0002\u0002\u0002\u014b\u014e\u0003\u0002\u0002\u0002\u014c\u014a\u0003",
    "\u0002\u0002\u0002\u014c\u014d\u0003\u0002\u0002\u0002\u014d\u001d\u0003",
    "\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002\u0002\u014f\u0154\u0005",
    " \u0011\u0002\u0150\u0151\t\u0004\u0002\u0002\u0151\u0153\u0005 \u0011",
    "\u0002\u0152\u0150\u0003\u0002\u0002\u0002\u0153\u0156\u0003\u0002\u0002",
    "\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0154\u0155\u0003\u0002\u0002",
    "\u0002\u0155\u001f\u0003\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002",
    "\u0002\u0157\u015c\u0005\"\u0012\u0002\u0158\u0159\t\u0005\u0002\u0002",
    "\u0159\u015b\u0005\"\u0012\u0002\u015a\u0158\u0003\u0002\u0002\u0002",
    "\u015b\u015e\u0003\u0002\u0002\u0002\u015c\u015a\u0003\u0002\u0002\u0002",
    "\u015c\u015d\u0003\u0002\u0002\u0002\u015d!\u0003\u0002\u0002\u0002",
    "\u015e\u015c\u0003\u0002\u0002\u0002\u015f\u0162\u0005$\u0013\u0002",
    "\u0160\u0161\u00071\u0002\u0002\u0161\u0163\u0005$\u0013\u0002\u0162",
    "\u0160\u0003\u0002\u0002\u0002\u0162\u0163\u0003\u0002\u0002\u0002\u0163",
    "\u0166\u0003\u0002\u0002\u0002\u0164\u0165\u00071\u0002\u0002\u0165",
    "\u0167\u0005$\u0013\u0002\u0166\u0164\u0003\u0002\u0002\u0002\u0166",
    "\u0167\u0003\u0002\u0002\u0002\u0167#\u0003\u0002\u0002\u0002\u0168",
    "\u0169\u0007\u001a\u0002\u0002\u0169\u016c\u0005&\u0014\u0002\u016a",
    "\u016c\u0005&\u0014\u0002\u016b\u0168\u0003\u0002\u0002\u0002\u016b",
    "\u016a\u0003\u0002\u0002\u0002\u016c%\u0003\u0002\u0002\u0002\u016d",
    "\u0172\u0005*\u0016\u0002\u016e\u016f\u0007\u001e\u0002\u0002\u016f",
    "\u0171\u0005(\u0015\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0171",
    "\u0174\u0003\u0002\u0002\u0002\u0172\u0170\u0003\u0002\u0002\u0002\u0172",
    "\u0173\u0003\u0002\u0002\u0002\u0173\'\u0003\u0002\u0002\u0002\u0174",
    "\u0172\u0003\u0002\u0002\u0002\u0175\u0179\u0005*\u0016\u0002\u0176",
    "\u0177\u0007\u001a\u0002\u0002\u0177\u0179\u0005*\u0016\u0002\u0178",
    "\u0175\u0003\u0002\u0002\u0002\u0178\u0176\u0003\u0002\u0002\u0002\u0179",
    ")\u0003\u0002\u0002\u0002\u017a\u017b\u0007\u001f\u0002\u0002\u017b",
    "\u017e\u0005,\u0017\u0002\u017c\u017e\u0005,\u0017\u0002\u017d\u017a",
    "\u0003\u0002\u0002\u0002\u017d\u017c\u0003\u0002\u0002\u0002\u017e+",
    "\u0003\u0002\u0002\u0002\u017f\u0180\u0005.\u0018\u0002\u0180-\u0003",
    "\u0002\u0002\u0002\u0181\u0188\u00052\u001a\u0002\u0182\u0185\u0005",
    "<\u001f\u0002\u0183\u0185\u00050\u0019\u0002\u0184\u0182\u0003\u0002",
    "\u0002\u0002\u0184\u0183\u0003\u0002\u0002\u0002\u0185\u0187\u0003\u0002",
    "\u0002\u0002\u0186\u0184\u0003\u0002\u0002\u0002\u0187\u018a\u0003\u0002",
    "\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002\u0188\u0189\u0003\u0002",
    "\u0002\u0002\u0189/\u0003\u0002\u0002\u0002\u018a\u0188\u0003\u0002",
    "\u0002\u0002\u018b\u0194\u0007\u0003\u0002\u0002\u018c\u0191\u0005\u0014",
    "\u000b\u0002\u018d\u018e\u00072\u0002\u0002\u018e\u0190\u0005\u0014",
    "\u000b\u0002\u018f\u018d\u0003\u0002\u0002\u0002\u0190\u0193\u0003\u0002",
    "\u0002\u0002\u0191\u018f\u0003\u0002\u0002\u0002\u0191\u0192\u0003\u0002",
    "\u0002\u0002\u0192\u0195\u0003\u0002\u0002\u0002\u0193\u0191\u0003\u0002",
    "\u0002\u0002\u0194\u018c\u0003\u0002\u0002\u0002\u0194\u0195\u0003\u0002",
    "\u0002\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u0197\u0007\u0004",
    "\u0002\u0002\u01971\u0003\u0002\u0002\u0002\u0198\u0199\u0007\u0003",
    "\u0002\u0002\u0199\u019a\u0005\u0014\u000b\u0002\u019a\u019b\u0007\u0004",
    "\u0002\u0002\u019b\u019e\u0003\u0002\u0002\u0002\u019c\u019e\u00054",
    "\u001b\u0002\u019d\u0198\u0003\u0002\u0002\u0002\u019d\u019c\u0003\u0002",
    "\u0002\u0002\u019e3\u0003\u0002\u0002\u0002\u019f\u01a9\u0005F$\u0002",
    "\u01a0\u01a9\u0005J&\u0002\u01a1\u01a9\u0005Z.\u0002\u01a2\u01a9\u0005",
    "L\'\u0002\u01a3\u01a9\u0007+\u0002\u0002\u01a4\u01a9\u0005X-\u0002\u01a5",
    "\u01a9\u0005:\u001e\u0002\u01a6\u01a9\u0005\u000e\b\u0002\u01a7\u01a9",
    "\u00056\u001c\u0002\u01a8\u019f\u0003\u0002\u0002\u0002\u01a8\u01a0",
    "\u0003\u0002\u0002\u0002\u01a8\u01a1\u0003\u0002\u0002\u0002\u01a8\u01a2",
    "\u0003\u0002\u0002\u0002\u01a8\u01a3\u0003\u0002\u0002\u0002\u01a8\u01a4",
    "\u0003\u0002\u0002\u0002\u01a8\u01a5\u0003\u0002\u0002\u0002\u01a8\u01a6",
    "\u0003\u0002\u0002\u0002\u01a8\u01a7\u0003\u0002\u0002\u0002\u01a95",
    "\u0003\u0002\u0002\u0002\u01aa\u01ab\u0007\u000f\u0002\u0002\u01ab\u01ad",
    "\u0007+\u0002\u0002\u01ac\u01ae\u00050\u0019\u0002\u01ad\u01ac\u0003",
    "\u0002\u0002\u0002\u01ad\u01ae\u0003\u0002\u0002\u0002\u01ae7\u0003",
    "\u0002\u0002\u0002\u01af\u01b5\u0005H%\u0002\u01b0\u01b5\u0005F$\u0002",
    "\u01b1\u01b5\u0005J&\u0002\u01b2\u01b5\u0005Z.\u0002\u01b3\u01b5\u0005",
    ":\u001e\u0002\u01b4\u01af\u0003\u0002\u0002\u0002\u01b4\u01b0\u0003",
    "\u0002\u0002\u0002\u01b4\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b2\u0003",
    "\u0002\u0002\u0002\u01b4\u01b3\u0003\u0002\u0002\u0002\u01b59\u0003",
    "\u0002\u0002\u0002\u01b6\u01ba\u0007 \u0002\u0002\u01b7\u01b9\u0007",
    "\b\u0002\u0002\u01b8\u01b7\u0003\u0002\u0002\u0002\u01b9\u01bc\u0003",
    "\u0002\u0002\u0002\u01ba\u01b8\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003",
    "\u0002\u0002\u0002\u01bb\u01d7\u0003\u0002\u0002\u0002\u01bc\u01ba\u0003",
    "\u0002\u0002\u0002\u01bd\u01c1\u0005D#\u0002\u01be\u01c0\u0007\b\u0002",
    "\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01c0\u01c3\u0003\u0002\u0002",
    "\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002\u01c1\u01c2\u0003\u0002\u0002",
    "\u0002\u01c2\u01d4\u0003\u0002\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002",
    "\u0002\u01c4\u01c8\u00072\u0002\u0002\u01c5\u01c7\u0007\b\u0002\u0002",
    "\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c7\u01ca\u0003\u0002\u0002\u0002",
    "\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002",
    "\u01c9\u01cb\u0003\u0002\u0002\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002",
    "\u01cb\u01cf\u0005D#\u0002\u01cc\u01ce\u0007\b\u0002\u0002\u01cd\u01cc",
    "\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003\u0002\u0002\u0002\u01cf\u01cd",
    "\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d3",
    "\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002\u01d2\u01c4",
    "\u0003\u0002\u0002\u0002\u01d3\u01d6\u0003\u0002\u0002\u0002\u01d4\u01d2",
    "\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d8",
    "\u0003\u0002\u0002\u0002\u01d6\u01d4\u0003\u0002\u0002\u0002\u01d7\u01bd",
    "\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01dc",
    "\u0003\u0002\u0002\u0002\u01d9\u01db\u0007\b\u0002\u0002\u01da\u01d9",
    "\u0003\u0002\u0002\u0002\u01db\u01de\u0003\u0002\u0002\u0002\u01dc\u01da",
    "\u0003\u0002\u0002\u0002\u01dc\u01dd\u0003\u0002\u0002\u0002\u01dd\u01df",
    "\u0003\u0002\u0002\u0002\u01de\u01dc\u0003\u0002\u0002\u0002\u01df\u020b",
    "\u0007!\u0002\u0002\u01e0\u01e4\u0007\"\u0002\u0002\u01e1\u01e3\u0007",
    "\b\u0002\u0002\u01e2\u01e1\u0003\u0002\u0002\u0002\u01e3\u01e6\u0003",
    "\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003",
    "\u0002\u0002\u0002\u01e5\u0201\u0003\u0002\u0002\u0002\u01e6\u01e4\u0003",
    "\u0002\u0002\u0002\u01e7\u01eb\u0005D#\u0002\u01e8\u01ea\u0007\b\u0002",
    "\u0002\u01e9\u01e8\u0003\u0002\u0002\u0002\u01ea\u01ed\u0003\u0002\u0002",
    "\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002",
    "\u0002\u01ec\u01fe\u0003\u0002\u0002\u0002\u01ed\u01eb\u0003\u0002\u0002",
    "\u0002\u01ee\u01f2\u00072\u0002\u0002\u01ef\u01f1\u0007\b\u0002\u0002",
    "\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f1\u01f4\u0003\u0002\u0002\u0002",
    "\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002",
    "\u01f3\u01f5\u0003\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002",
    "\u01f5\u01f9\u0005D#\u0002\u01f6\u01f8\u0007\b\u0002\u0002\u01f7\u01f6",
    "\u0003\u0002\u0002\u0002\u01f8\u01fb\u0003\u0002\u0002\u0002\u01f9\u01f7",
    "\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u01fd",
    "\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002\u01fc\u01ee",
    "\u0003\u0002\u0002\u0002\u01fd\u0200\u0003\u0002\u0002\u0002\u01fe\u01fc",
    "\u0003\u0002\u0002\u0002\u01fe\u01ff\u0003\u0002\u0002\u0002\u01ff\u0202",
    "\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0201\u01e7",
    "\u0003\u0002\u0002\u0002\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0206",
    "\u0003\u0002\u0002\u0002\u0203\u0205\u0007\b\u0002\u0002\u0204\u0203",
    "\u0003\u0002\u0002\u0002\u0205\u0208\u0003\u0002\u0002\u0002\u0206\u0204",
    "\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002\u0207\u0209",
    "\u0003\u0002\u0002\u0002\u0208\u0206\u0003\u0002\u0002\u0002\u0209\u020b",
    "\u0007#\u0002\u0002\u020a\u01b6\u0003\u0002\u0002\u0002\u020a\u01e0",
    "\u0003\u0002\u0002\u0002\u020b;\u0003\u0002\u0002\u0002\u020c\u020f",
    "\u0005> \u0002\u020d\u020f\u0005@!\u0002\u020e\u020c\u0003\u0002\u0002",
    "\u0002\u020e\u020d\u0003\u0002\u0002\u0002\u020f=\u0003\u0002\u0002",
    "\u0002\u0210\u0213\u0007 \u0002\u0002\u0211\u0214\u0005\u0014\u000b",
    "\u0002\u0212\u0214\u0007\u001b\u0002\u0002\u0213\u0211\u0003\u0002\u0002",
    "\u0002\u0213\u0212\u0003\u0002\u0002\u0002\u0214\u021c\u0003\u0002\u0002",
    "\u0002\u0215\u0218\u00072\u0002\u0002\u0216\u0219\u0005\u0014\u000b",
    "\u0002\u0217\u0219\u0007\u001b\u0002\u0002\u0218\u0216\u0003\u0002\u0002",
    "\u0002\u0218\u0217\u0003\u0002\u0002\u0002\u0219\u021b\u0003\u0002\u0002",
    "\u0002\u021a\u0215\u0003\u0002\u0002\u0002\u021b\u021e\u0003\u0002\u0002",
    "\u0002\u021c\u021a\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002",
    "\u0002\u021d\u021f\u0003\u0002\u0002\u0002\u021e\u021c\u0003\u0002\u0002",
    "\u0002\u021f\u0231\u0007!\u0002\u0002\u0220\u0223\u0007\"\u0002\u0002",
    "\u0221\u0224\u0005\u0014\u000b\u0002\u0222\u0224\u0007\u001b\u0002\u0002",
    "\u0223\u0221\u0003\u0002\u0002\u0002\u0223\u0222\u0003\u0002\u0002\u0002",
    "\u0224\u022c\u0003\u0002\u0002\u0002\u0225\u0228\u00072\u0002\u0002",
    "\u0226\u0229\u0005\u0014\u000b\u0002\u0227\u0229\u0007\u001b\u0002\u0002",
    "\u0228\u0226\u0003\u0002\u0002\u0002\u0228\u0227\u0003\u0002\u0002\u0002",
    "\u0229\u022b\u0003\u0002\u0002\u0002\u022a\u0225\u0003\u0002\u0002\u0002",
    "\u022b\u022e\u0003\u0002\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002",
    "\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022f\u0003\u0002\u0002\u0002",
    "\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0231\u0007#\u0002\u0002",
    "\u0230\u0210\u0003\u0002\u0002\u0002\u0230\u0220\u0003\u0002\u0002\u0002",
    "\u0231?\u0003\u0002\u0002\u0002\u0232\u0233\u0007\u0006\u0002\u0002",
    "\u0233\u0235\u0005B\"\u0002\u0234\u0232\u0003\u0002\u0002\u0002\u0235",
    "\u0236\u0003\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236",
    "\u0237\u0003\u0002\u0002\u0002\u0237A\u0003\u0002\u0002\u0002\u0238",
    "\u0239\t\u0006\u0002\u0002\u0239C\u0003\u0002\u0002\u0002\u023a\u023e",
    "\u0005B\"\u0002\u023b\u023d\u0007\b\u0002\u0002\u023c\u023b\u0003\u0002",
    "\u0002\u0002\u023d\u0240\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002",
    "\u0002\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0241\u0003\u0002",
    "\u0002\u0002\u0240\u023e\u0003\u0002\u0002\u0002\u0241\u0242\u00071",
    "\u0002\u0002\u0242\u0244\u0003\u0002\u0002\u0002\u0243\u023a\u0003\u0002",
    "\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244\u0248\u0003\u0002",
    "\u0002\u0002\u0245\u0247\u0007\b\u0002\u0002\u0246\u0245\u0003\u0002",
    "\u0002\u0002\u0247\u024a\u0003\u0002\u0002\u0002\u0248\u0246\u0003\u0002",
    "\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002\u0249\u024b\u0003\u0002",
    "\u0002\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024b\u024c\u0005\u0014",
    "\u000b\u0002\u024cE\u0003\u0002\u0002\u0002\u024d\u024e\t\u0007\u0002",
    "\u0002\u024eG\u0003\u0002\u0002\u0002\u024f\u0250\u0007\u001a\u0002",
    "\u0002\u0250\u0251\u0005F$\u0002\u0251I\u0003\u0002\u0002\u0002\u0252",
    "\u0253\t\b\u0002\u0002\u0253K\u0003\u0002\u0002\u0002\u0254\u0255\u0007",
    "\"\u0002\u0002\u0255\u0256\u0005\u001e\u0010\u0002\u0256\u0257\u0005",
    "N(\u0002\u0257\u0258\u0007#\u0002\u0002\u0258M\u0003\u0002\u0002\u0002",
    "\u0259\u025e\u0005P)\u0002\u025a\u025b\u0007(\u0002\u0002\u025b\u025d",
    "\u0005P)\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025d\u0260\u0003",
    "\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e\u025f\u0003",
    "\u0002\u0002\u0002\u025fO\u0003\u0002\u0002\u0002\u0260\u025e\u0003",
    "\u0002\u0002\u0002\u0261\u0266\u0005R*\u0002\u0262\u0263\t\t\u0002\u0002",
    "\u0263\u0265\u0005R*\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0265",
    "\u0268\u0003\u0002\u0002\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0266",
    "\u0267\u0003\u0002\u0002\u0002\u0267Q\u0003\u0002\u0002\u0002\u0268",
    "\u0266\u0003\u0002\u0002\u0002\u0269\u026a\u0007$\u0002\u0002\u026a",
    "\u026b\u0007\u001c\u0002\u0002\u026b\u026c\u0003\u0002\u0002\u0002\u026c",
    "\u026e\u0005T+\u0002\u026d\u026f\u0007*\u0002\u0002\u026e\u026d\u0003",
    "\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f\u0271\u0003",
    "\u0002\u0002\u0002\u0270\u0272\u0007)\u0002\u0002\u0271\u0270\u0003",
    "\u0002\u0002\u0002\u0271\u0272\u0003\u0002\u0002\u0002\u0272\u027b\u0003",
    "\u0002\u0002\u0002\u0273\u0275\u0005T+\u0002\u0274\u0276\u0007*\u0002",
    "\u0002\u0275\u0274\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002\u0002",
    "\u0002\u0276\u0278\u0003\u0002\u0002\u0002\u0277\u0279\u0007)\u0002",
    "\u0002\u0278\u0277\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002",
    "\u0002\u0279\u027b\u0003\u0002\u0002\u0002\u027a\u0269\u0003\u0002\u0002",
    "\u0002\u027a\u0273\u0003\u0002\u0002\u0002\u027bS\u0003\u0002\u0002",
    "\u0002\u027c\u0284\u0005V,\u0002\u027d\u027f\u0007\u001e\u0002\u0002",
    "\u027e\u0280\u0007\u001a\u0002\u0002\u027f\u027e\u0003\u0002\u0002\u0002",
    "\u027f\u0280\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002",
    "\u0281\u0283\t\u0007\u0002\u0002\u0282\u027d\u0003\u0002\u0002\u0002",
    "\u0283\u0286\u0003\u0002\u0002\u0002\u0284\u0282\u0003\u0002\u0002\u0002",
    "\u0284\u0285\u0003\u0002\u0002\u0002\u0285U\u0003\u0002\u0002\u0002",
    "\u0286\u0284\u0003\u0002\u0002\u0002\u0287\u028b\u0007+\u0002\u0002",
    "\u0288\u028a\u0007+\u0002\u0002\u0289\u0288\u0003\u0002\u0002\u0002",
    "\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002\u0002",
    "\u028b\u028c\u0003\u0002\u0002\u0002\u028c\u0293\u0003\u0002\u0002\u0002",
    "\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u028f\u0007\u0003\u0002\u0002",
    "\u028f\u0290\u0005N(\u0002\u0290\u0291\u0007\u0004\u0002\u0002\u0291",
    "\u0293\u0003\u0002\u0002\u0002\u0292\u0287\u0003\u0002\u0002\u0002\u0292",
    "\u028e\u0003\u0002\u0002\u0002\u0293W\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0007,\u0002\u0002\u0295Y\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u00073\u0002\u0002\u0297[\u0003\u0002\u0002\u0002]_fimv\u007f\u0083",
    "\u008c\u0096\u009c\u00a3\u00a6\u00b5\u00b8\u00c0\u00c3\u00c9\u00d8\u00db",
    "\u00e3\u00e6\u00ec\u00f3\u00fe\u0101\u0109\u010c\u0113\u0118\u011c\u0121",
    "\u0125\u012c\u0134\u013c\u0144\u014c\u0154\u015c\u0162\u0166\u016b\u0172",
    "\u0178\u017d\u0184\u0188\u0191\u0194\u019d\u01a8\u01ad\u01b4\u01ba\u01c1",
    "\u01c8\u01cf\u01d4\u01d7\u01dc\u01e4\u01eb\u01f2\u01f9\u01fe\u0201\u0206",
    "\u020a\u020e\u0213\u0218\u021c\u0223\u0228\u022c\u0230\u0236\u023e\u0243",
    "\u0248\u025e\u0266\u026e\u0271\u0275\u0278\u027a\u027f\u0284\u028b\u0292"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'('", "')'", "'<-'", "'.'", null, null, null,
                     null, null, null, null, null, null, null, null, null,
                     null, null, "'<'", "'<='", "'>'", "'>='", "'+'", "'-'",
                     "'*'", "'/'", null, "'^'", null, null, null, "'{'",
                     "'}'", null, null, null, null, null, null, null, null,
                     null, "'['", "']'", null, null, "':'", "','" ];

var symbolicNames = [ null, null, null, null, null, "WS", "NEWLINE", "IFSTATEMENT",
                      "THENSTATEMENT", "ELSESTATEMENT", "FUNCTIONSTATEMENT",
                      "ENDBLOCK", "RETURNSTATEMENT", "NEWSTATEMENT", "OR",
                      "XOR", "AND", "EQUALS", "NOTEQUALS", "LT", "LTEQ",
                      "GT", "GTEQ", "PLUS", "MINUS", "MULT", "DIV", "MOD",
                      "POW", "NOT", "LARR", "RARR", "LCURL", "RCURL", "INTEGER",
                      "FLOAT", "TRUE", "FALSE", "PER", "SQUARED", "CUBED",
                      "IDENT", "PRIMITIVE", "LBRACKET", "RBRACKET", "COMMENT",
                      "LINE_COMMENT", "COLON", "COMMA", "STRING" ];

var ruleNames =  [ "lines", "expression", "returnExp", "innerBlock", "ifThenElse",
                   "functionDef", "anonFunctionDef", "assignment", "assigned",
                   "logicalExpression", "booleanXORExpression", "booleanAndExpression",
                   "equalityExpression", "relationalExpression", "additiveExpression",
                   "multiplicativeExpression", "arrayExpression", "negationExpression",
                   "powerExpression", "unaryOrNegate", "unaryExpression",
                   "innerPrimaryExpression", "selectionExpression", "funCall",
                   "primaryExpression", "value", "newObject", "defaultValue",
                   "array", "selector", "minarray", "dotselector", "arrayName",
                   "label", "number", "negnumber", "bool", "material", "unitMultiplicativeExpression",
                   "unitInnerMultiplicativeExpression", "unitClump", "unitPowerExpression",
                   "unit", "primitive", "string" ];

function FormulaParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    this.listener = FormulaListener;
    return this;
}

FormulaParser.prototype = Object.create(antlr4.Parser.prototype);
FormulaParser.prototype.constructor = FormulaParser;

Object.defineProperty(FormulaParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

FormulaParser.EOF = antlr4.Token.EOF;
FormulaParser.T__0 = 1;
FormulaParser.T__1 = 2;
FormulaParser.T__2 = 3;
FormulaParser.T__3 = 4;
FormulaParser.WS = 5;
FormulaParser.NEWLINE = 6;
FormulaParser.IFSTATEMENT = 7;
FormulaParser.THENSTATEMENT = 8;
FormulaParser.ELSESTATEMENT = 9;
FormulaParser.FUNCTIONSTATEMENT = 10;
FormulaParser.ENDBLOCK = 11;
FormulaParser.RETURNSTATEMENT = 12;
FormulaParser.NEWSTATEMENT = 13;
FormulaParser.OR = 14;
FormulaParser.XOR = 15;
FormulaParser.AND = 16;
FormulaParser.EQUALS = 17;
FormulaParser.NOTEQUALS = 18;
FormulaParser.LT = 19;
FormulaParser.LTEQ = 20;
FormulaParser.GT = 21;
FormulaParser.GTEQ = 22;
FormulaParser.PLUS = 23;
FormulaParser.MINUS = 24;
FormulaParser.MULT = 25;
FormulaParser.DIV = 26;
FormulaParser.MOD = 27;
FormulaParser.POW = 28;
FormulaParser.NOT = 29;
FormulaParser.LARR = 30;
FormulaParser.RARR = 31;
FormulaParser.LCURL = 32;
FormulaParser.RCURL = 33;
FormulaParser.INTEGER = 34;
FormulaParser.FLOAT = 35;
FormulaParser.TRUE = 36;
FormulaParser.FALSE = 37;
FormulaParser.PER = 38;
FormulaParser.SQUARED = 39;
FormulaParser.CUBED = 40;
FormulaParser.IDENT = 41;
FormulaParser.PRIMITIVE = 42;
FormulaParser.LBRACKET = 43;
FormulaParser.RBRACKET = 44;
FormulaParser.COMMENT = 45;
FormulaParser.LINE_COMMENT = 46;
FormulaParser.COLON = 47;
FormulaParser.COMMA = 48;
FormulaParser.STRING = 49;

FormulaParser.RULE_lines = 0;
FormulaParser.RULE_expression = 1;
FormulaParser.RULE_returnExp = 2;
FormulaParser.RULE_innerBlock = 3;
FormulaParser.RULE_ifThenElse = 4;
FormulaParser.RULE_functionDef = 5;
FormulaParser.RULE_anonFunctionDef = 6;
FormulaParser.RULE_assignment = 7;
FormulaParser.RULE_assigned = 8;
FormulaParser.RULE_logicalExpression = 9;
FormulaParser.RULE_booleanXORExpression = 10;
FormulaParser.RULE_booleanAndExpression = 11;
FormulaParser.RULE_equalityExpression = 12;
FormulaParser.RULE_relationalExpression = 13;
FormulaParser.RULE_additiveExpression = 14;
FormulaParser.RULE_multiplicativeExpression = 15;
FormulaParser.RULE_arrayExpression = 16;
FormulaParser.RULE_negationExpression = 17;
FormulaParser.RULE_powerExpression = 18;
FormulaParser.RULE_unaryOrNegate = 19;
FormulaParser.RULE_unaryExpression = 20;
FormulaParser.RULE_innerPrimaryExpression = 21;
FormulaParser.RULE_selectionExpression = 22;
FormulaParser.RULE_funCall = 23;
FormulaParser.RULE_primaryExpression = 24;
FormulaParser.RULE_value = 25;
FormulaParser.RULE_newObject = 26;
FormulaParser.RULE_defaultValue = 27;
FormulaParser.RULE_array = 28;
FormulaParser.RULE_selector = 29;
FormulaParser.RULE_minarray = 30;
FormulaParser.RULE_dotselector = 31;
FormulaParser.RULE_arrayName = 32;
FormulaParser.RULE_label = 33;
FormulaParser.RULE_number = 34;
FormulaParser.RULE_negnumber = 35;
FormulaParser.RULE_bool = 36;
FormulaParser.RULE_material = 37;
FormulaParser.RULE_unitMultiplicativeExpression = 38;
FormulaParser.RULE_unitInnerMultiplicativeExpression = 39;
FormulaParser.RULE_unitClump = 40;
FormulaParser.RULE_unitPowerExpression = 41;
FormulaParser.RULE_unit = 42;
FormulaParser.RULE_primitive = 43;
FormulaParser.RULE_string = 44;

function LinesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_lines;
    return this;
}

LinesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinesContext.prototype.constructor = LinesContext;

LinesContext.prototype.EOF = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.EOF);
    } else {
        return this.getToken(FormulaParser.EOF, i);
    }
};


LinesContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


LinesContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

LinesContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterLines(this);
	}
};

LinesContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitLines(this);
	}
};




FormulaParser.LinesContext = LinesContext;

FormulaParser.prototype.lines = function() {

    var localctx = new LinesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, FormulaParser.RULE_lines);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 93;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FormulaParser.NEWLINE) {
            this.state = 90;
            this.match(FormulaParser.NEWLINE);
            this.state = 95;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 107;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FormulaParser.T__0) | (1 << FormulaParser.IFSTATEMENT) | (1 << FormulaParser.FUNCTIONSTATEMENT) | (1 << FormulaParser.RETURNSTATEMENT) | (1 << FormulaParser.NEWSTATEMENT) | (1 << FormulaParser.MINUS) | (1 << FormulaParser.NOT) | (1 << FormulaParser.LARR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FormulaParser.LCURL - 32)) | (1 << (FormulaParser.INTEGER - 32)) | (1 << (FormulaParser.FLOAT - 32)) | (1 << (FormulaParser.TRUE - 32)) | (1 << (FormulaParser.FALSE - 32)) | (1 << (FormulaParser.IDENT - 32)) | (1 << (FormulaParser.PRIMITIVE - 32)) | (1 << (FormulaParser.STRING - 32)))) !== 0)) {
            this.state = 96;
            this.expression();
            this.state = 103;
            switch(this._input.LA(1)) {
            case FormulaParser.NEWLINE:
                this.state = 98;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 97;
                    this.match(FormulaParser.NEWLINE);
                    this.state = 100;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===FormulaParser.NEWLINE);
                break;
            case FormulaParser.EOF:
                this.state = 102;
                this.match(FormulaParser.EOF);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 109;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 110;
        this.match(FormulaParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.logicalExpression = function() {
    return this.getTypedRuleContext(LogicalExpressionContext,0);
};

ExpressionContext.prototype.ifThenElse = function() {
    return this.getTypedRuleContext(IfThenElseContext,0);
};

ExpressionContext.prototype.functionDef = function() {
    return this.getTypedRuleContext(FunctionDefContext,0);
};

ExpressionContext.prototype.returnExp = function() {
    return this.getTypedRuleContext(ReturnExpContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitExpression(this);
	}
};




FormulaParser.ExpressionContext = ExpressionContext;

FormulaParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, FormulaParser.RULE_expression);
    try {
        this.state = 116;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 112;
            this.logicalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 113;
            this.ifThenElse();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 114;
            this.functionDef();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 115;
            this.returnExp();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnExpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_returnExp;
    return this;
}

ReturnExpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnExpContext.prototype.constructor = ReturnExpContext;

ReturnExpContext.prototype.RETURNSTATEMENT = function() {
    return this.getToken(FormulaParser.RETURNSTATEMENT, 0);
};

ReturnExpContext.prototype.logicalExpression = function() {
    return this.getTypedRuleContext(LogicalExpressionContext,0);
};

ReturnExpContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterReturnExp(this);
	}
};

ReturnExpContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitReturnExp(this);
	}
};




FormulaParser.ReturnExpContext = ReturnExpContext;

FormulaParser.prototype.returnExp = function() {

    var localctx = new ReturnExpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, FormulaParser.RULE_returnExp);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 118;
        this.match(FormulaParser.RETURNSTATEMENT);
        this.state = 119;
        this.logicalExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_innerBlock;
    return this;
}

InnerBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerBlockContext.prototype.constructor = InnerBlockContext;

InnerBlockContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InnerBlockContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


InnerBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterInnerBlock(this);
	}
};

InnerBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitInnerBlock(this);
	}
};




FormulaParser.InnerBlockContext = InnerBlockContext;

FormulaParser.prototype.innerBlock = function() {

    var localctx = new InnerBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, FormulaParser.RULE_innerBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FormulaParser.T__0) | (1 << FormulaParser.IFSTATEMENT) | (1 << FormulaParser.FUNCTIONSTATEMENT) | (1 << FormulaParser.RETURNSTATEMENT) | (1 << FormulaParser.NEWSTATEMENT) | (1 << FormulaParser.MINUS) | (1 << FormulaParser.NOT) | (1 << FormulaParser.LARR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FormulaParser.LCURL - 32)) | (1 << (FormulaParser.INTEGER - 32)) | (1 << (FormulaParser.FLOAT - 32)) | (1 << (FormulaParser.TRUE - 32)) | (1 << (FormulaParser.FALSE - 32)) | (1 << (FormulaParser.IDENT - 32)) | (1 << (FormulaParser.PRIMITIVE - 32)) | (1 << (FormulaParser.STRING - 32)))) !== 0)) {
            this.state = 121;
            this.expression();

            this.state = 123;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 122;
                this.match(FormulaParser.NEWLINE);
                this.state = 125;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FormulaParser.NEWLINE);
            this.state = 131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfThenElseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_ifThenElse;
    return this;
}

IfThenElseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfThenElseContext.prototype.constructor = IfThenElseContext;

IfThenElseContext.prototype.IFSTATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.IFSTATEMENT);
    } else {
        return this.getToken(FormulaParser.IFSTATEMENT, i);
    }
};


IfThenElseContext.prototype.logicalExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogicalExpressionContext);
    } else {
        return this.getTypedRuleContext(LogicalExpressionContext,i);
    }
};

IfThenElseContext.prototype.THENSTATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.THENSTATEMENT);
    } else {
        return this.getToken(FormulaParser.THENSTATEMENT, i);
    }
};


IfThenElseContext.prototype.innerBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InnerBlockContext);
    } else {
        return this.getTypedRuleContext(InnerBlockContext,i);
    }
};

IfThenElseContext.prototype.ENDBLOCK = function() {
    return this.getToken(FormulaParser.ENDBLOCK, 0);
};

IfThenElseContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


IfThenElseContext.prototype.ELSESTATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.ELSESTATEMENT);
    } else {
        return this.getToken(FormulaParser.ELSESTATEMENT, i);
    }
};


IfThenElseContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterIfThenElse(this);
	}
};

IfThenElseContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitIfThenElse(this);
	}
};




FormulaParser.IfThenElseContext = IfThenElseContext;

FormulaParser.prototype.ifThenElse = function() {

    var localctx = new IfThenElseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, FormulaParser.RULE_ifThenElse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 132;
        this.match(FormulaParser.IFSTATEMENT);
        this.state = 133;
        this.logicalExpression();
        this.state = 134;
        this.match(FormulaParser.THENSTATEMENT);
        this.state = 136;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 135;
            this.match(FormulaParser.NEWLINE);
            this.state = 138;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===FormulaParser.NEWLINE);
        this.state = 140;
        this.innerBlock();
        this.state = 154;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 141;
                this.match(FormulaParser.ELSESTATEMENT);
                this.state = 142;
                this.match(FormulaParser.IFSTATEMENT);
                this.state = 143;
                this.logicalExpression();
                this.state = 144;
                this.match(FormulaParser.THENSTATEMENT);
                this.state = 146;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 145;
                    this.match(FormulaParser.NEWLINE);
                    this.state = 148;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===FormulaParser.NEWLINE);
                this.state = 150;
                this.innerBlock();
            }
            this.state = 156;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
        }

        this.state = 164;
        _la = this._input.LA(1);
        if(_la===FormulaParser.ELSESTATEMENT) {
            this.state = 157;
            this.match(FormulaParser.ELSESTATEMENT);
            this.state = 159;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 158;
                this.match(FormulaParser.NEWLINE);
                this.state = 161;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FormulaParser.NEWLINE);
            this.state = 163;
            this.innerBlock();
        }

        this.state = 166;
        this.match(FormulaParser.ENDBLOCK);
        this.state = 167;
        this.match(FormulaParser.IFSTATEMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_functionDef;
    return this;
}

FunctionDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefContext.prototype.constructor = FunctionDefContext;

FunctionDefContext.prototype.FUNCTIONSTATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.FUNCTIONSTATEMENT);
    } else {
        return this.getToken(FormulaParser.FUNCTIONSTATEMENT, i);
    }
};


FunctionDefContext.prototype.IDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.IDENT);
    } else {
        return this.getToken(FormulaParser.IDENT, i);
    }
};


FunctionDefContext.prototype.innerBlock = function() {
    return this.getTypedRuleContext(InnerBlockContext,0);
};

FunctionDefContext.prototype.ENDBLOCK = function() {
    return this.getToken(FormulaParser.ENDBLOCK, 0);
};

FunctionDefContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


FunctionDefContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.EQUALS);
    } else {
        return this.getToken(FormulaParser.EQUALS, i);
    }
};


FunctionDefContext.prototype.defaultValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefaultValueContext);
    } else {
        return this.getTypedRuleContext(DefaultValueContext,i);
    }
};

FunctionDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterFunctionDef(this);
	}
};

FunctionDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitFunctionDef(this);
	}
};




FormulaParser.FunctionDefContext = FunctionDefContext;

FormulaParser.prototype.functionDef = function() {

    var localctx = new FunctionDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, FormulaParser.RULE_functionDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 169;
        this.match(FormulaParser.FUNCTIONSTATEMENT);
        this.state = 170;
        this.match(FormulaParser.IDENT);
        this.state = 171;
        this.match(FormulaParser.T__0);
        this.state = 193;
        _la = this._input.LA(1);
        if(_la===FormulaParser.IDENT) {
            this.state = 172;
            this.match(FormulaParser.IDENT);
            this.state = 182;
            switch(this._input.LA(1)) {
            case FormulaParser.EQUALS:
                this.state = 173;
                this.match(FormulaParser.EQUALS);
                this.state = 174;
                this.defaultValue();
                break;
            case FormulaParser.T__1:
            case FormulaParser.COMMA:
                this.state = 179;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 175;
                        this.match(FormulaParser.COMMA);
                        this.state = 176;
                        this.match(FormulaParser.IDENT);
                    }
                    this.state = 181;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 190;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.COMMA) {
                this.state = 184;
                this.match(FormulaParser.COMMA);
                this.state = 185;
                this.match(FormulaParser.IDENT);
                this.state = 186;
                this.match(FormulaParser.EQUALS);
                this.state = 187;
                this.defaultValue();
                this.state = 192;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 195;
        this.match(FormulaParser.T__1);
        this.state = 197;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 196;
            this.match(FormulaParser.NEWLINE);
            this.state = 199;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===FormulaParser.NEWLINE);
        this.state = 201;
        this.innerBlock();
        this.state = 202;
        this.match(FormulaParser.ENDBLOCK);
        this.state = 203;
        this.match(FormulaParser.FUNCTIONSTATEMENT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonFunctionDefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_anonFunctionDef;
    return this;
}

AnonFunctionDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonFunctionDefContext.prototype.constructor = AnonFunctionDefContext;

AnonFunctionDefContext.prototype.FUNCTIONSTATEMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.FUNCTIONSTATEMENT);
    } else {
        return this.getToken(FormulaParser.FUNCTIONSTATEMENT, i);
    }
};


AnonFunctionDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AnonFunctionDefContext.prototype.IDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.IDENT);
    } else {
        return this.getToken(FormulaParser.IDENT, i);
    }
};


AnonFunctionDefContext.prototype.innerBlock = function() {
    return this.getTypedRuleContext(InnerBlockContext,0);
};

AnonFunctionDefContext.prototype.ENDBLOCK = function() {
    return this.getToken(FormulaParser.ENDBLOCK, 0);
};

AnonFunctionDefContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.EQUALS);
    } else {
        return this.getToken(FormulaParser.EQUALS, i);
    }
};


AnonFunctionDefContext.prototype.defaultValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefaultValueContext);
    } else {
        return this.getTypedRuleContext(DefaultValueContext,i);
    }
};

AnonFunctionDefContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


AnonFunctionDefContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterAnonFunctionDef(this);
	}
};

AnonFunctionDefContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitAnonFunctionDef(this);
	}
};




FormulaParser.AnonFunctionDefContext = AnonFunctionDefContext;

FormulaParser.prototype.anonFunctionDef = function() {

    var localctx = new AnonFunctionDefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, FormulaParser.RULE_anonFunctionDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 205;
        this.match(FormulaParser.FUNCTIONSTATEMENT);
        this.state = 206;
        this.match(FormulaParser.T__0);
        this.state = 228;
        _la = this._input.LA(1);
        if(_la===FormulaParser.IDENT) {
            this.state = 207;
            this.match(FormulaParser.IDENT);
            this.state = 217;
            switch(this._input.LA(1)) {
            case FormulaParser.EQUALS:
                this.state = 208;
                this.match(FormulaParser.EQUALS);
                this.state = 209;
                this.defaultValue();
                break;
            case FormulaParser.T__1:
            case FormulaParser.COMMA:
                this.state = 214;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 210;
                        this.match(FormulaParser.COMMA);
                        this.state = 211;
                        this.match(FormulaParser.IDENT);
                    }
                    this.state = 216;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 225;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.COMMA) {
                this.state = 219;
                this.match(FormulaParser.COMMA);
                this.state = 220;
                this.match(FormulaParser.IDENT);
                this.state = 221;
                this.match(FormulaParser.EQUALS);
                this.state = 222;
                this.defaultValue();
                this.state = 227;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 230;
        this.match(FormulaParser.T__1);
        this.state = 241;
        switch(this._input.LA(1)) {
        case FormulaParser.NEWLINE:
            this.state = 232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 231;
                this.match(FormulaParser.NEWLINE);
                this.state = 234;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===FormulaParser.NEWLINE);
            this.state = 236;
            this.innerBlock();
            this.state = 237;
            this.match(FormulaParser.ENDBLOCK);
            this.state = 238;
            this.match(FormulaParser.FUNCTIONSTATEMENT);
            break;
        case FormulaParser.T__0:
        case FormulaParser.IFSTATEMENT:
        case FormulaParser.FUNCTIONSTATEMENT:
        case FormulaParser.RETURNSTATEMENT:
        case FormulaParser.NEWSTATEMENT:
        case FormulaParser.MINUS:
        case FormulaParser.NOT:
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
        case FormulaParser.INTEGER:
        case FormulaParser.FLOAT:
        case FormulaParser.TRUE:
        case FormulaParser.FALSE:
        case FormulaParser.IDENT:
        case FormulaParser.PRIMITIVE:
        case FormulaParser.STRING:
            this.state = 240;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_assignment;
    return this;
}

AssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentContext.prototype.constructor = AssignmentContext;

AssignmentContext.prototype.IDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.IDENT);
    } else {
        return this.getToken(FormulaParser.IDENT, i);
    }
};


AssignmentContext.prototype.logicalExpression = function() {
    return this.getTypedRuleContext(LogicalExpressionContext,0);
};

AssignmentContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.EQUALS);
    } else {
        return this.getToken(FormulaParser.EQUALS, i);
    }
};


AssignmentContext.prototype.defaultValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefaultValueContext);
    } else {
        return this.getTypedRuleContext(DefaultValueContext,i);
    }
};

AssignmentContext.prototype.PRIMITIVE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.PRIMITIVE);
    } else {
        return this.getToken(FormulaParser.PRIMITIVE, i);
    }
};


AssignmentContext.prototype.assigned = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignedContext);
    } else {
        return this.getTypedRuleContext(AssignedContext,i);
    }
};

AssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterAssignment(this);
	}
};

AssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitAssignment(this);
	}
};




FormulaParser.AssignmentContext = AssignmentContext;

FormulaParser.prototype.assignment = function() {

    var localctx = new AssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, FormulaParser.RULE_assignment);
    var _la = 0; // Token type
    try {
        this.state = 287;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 243;
            this.match(FormulaParser.IDENT);
            this.state = 244;
            this.match(FormulaParser.T__0);
            this.state = 266;
            _la = this._input.LA(1);
            if(_la===FormulaParser.IDENT) {
                this.state = 245;
                this.match(FormulaParser.IDENT);
                this.state = 255;
                switch(this._input.LA(1)) {
                case FormulaParser.EQUALS:
                    this.state = 246;
                    this.match(FormulaParser.EQUALS);
                    this.state = 247;
                    this.defaultValue();
                    break;
                case FormulaParser.T__1:
                case FormulaParser.COMMA:
                    this.state = 252;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 248;
                            this.match(FormulaParser.COMMA);
                            this.state = 249;
                            this.match(FormulaParser.IDENT);
                        }
                        this.state = 254;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
                    }

                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 263;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FormulaParser.COMMA) {
                    this.state = 257;
                    this.match(FormulaParser.COMMA);
                    this.state = 258;
                    this.match(FormulaParser.IDENT);
                    this.state = 259;
                    this.match(FormulaParser.EQUALS);
                    this.state = 260;
                    this.defaultValue();
                    this.state = 265;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 268;
            this.match(FormulaParser.T__1);
            this.state = 269;
            this.match(FormulaParser.T__2);
            this.state = 270;
            this.logicalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 273;
            switch(this._input.LA(1)) {
            case FormulaParser.PRIMITIVE:
                this.state = 271;
                this.match(FormulaParser.PRIMITIVE);
                break;
            case FormulaParser.IDENT:
                this.state = 272;
                this.assigned();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 282;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.COMMA) {
                this.state = 275;
                this.match(FormulaParser.COMMA);
                this.state = 278;
                switch(this._input.LA(1)) {
                case FormulaParser.PRIMITIVE:
                    this.state = 276;
                    this.match(FormulaParser.PRIMITIVE);
                    break;
                case FormulaParser.IDENT:
                    this.state = 277;
                    this.assigned();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 284;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 285;
            this.match(FormulaParser.T__2);
            this.state = 286;
            this.logicalExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_assigned;
    return this;
}

AssignedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignedContext.prototype.constructor = AssignedContext;

AssignedContext.prototype.IDENT = function() {
    return this.getToken(FormulaParser.IDENT, 0);
};

AssignedContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

AssignedContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterAssigned(this);
	}
};

AssignedContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitAssigned(this);
	}
};




FormulaParser.AssignedContext = AssignedContext;

FormulaParser.prototype.assigned = function() {

    var localctx = new AssignedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, FormulaParser.RULE_assigned);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this.match(FormulaParser.IDENT);
        this.state = 291;
        _la = this._input.LA(1);
        if(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (FormulaParser.T__3 - 4)) | (1 << (FormulaParser.LARR - 4)) | (1 << (FormulaParser.LCURL - 4)))) !== 0)) {
            this.state = 290;
            this.selector();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LogicalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_logicalExpression;
    return this;
}

LogicalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalExpressionContext.prototype.constructor = LogicalExpressionContext;

LogicalExpressionContext.prototype.booleanXORExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanXORExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanXORExpressionContext,i);
    }
};

LogicalExpressionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.OR);
    } else {
        return this.getToken(FormulaParser.OR, i);
    }
};


LogicalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterLogicalExpression(this);
	}
};

LogicalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitLogicalExpression(this);
	}
};




FormulaParser.LogicalExpressionContext = LogicalExpressionContext;

FormulaParser.prototype.logicalExpression = function() {

    var localctx = new LogicalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, FormulaParser.RULE_logicalExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 293;
        this.booleanXORExpression();
        this.state = 298;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 294;
                this.match(FormulaParser.OR);
                this.state = 295;
                this.booleanXORExpression();
            }
            this.state = 300;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanXORExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_booleanXORExpression;
    return this;
}

BooleanXORExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanXORExpressionContext.prototype.constructor = BooleanXORExpressionContext;

BooleanXORExpressionContext.prototype.booleanAndExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BooleanAndExpressionContext);
    } else {
        return this.getTypedRuleContext(BooleanAndExpressionContext,i);
    }
};

BooleanXORExpressionContext.prototype.XOR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.XOR);
    } else {
        return this.getToken(FormulaParser.XOR, i);
    }
};


BooleanXORExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterBooleanXORExpression(this);
	}
};

BooleanXORExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitBooleanXORExpression(this);
	}
};




FormulaParser.BooleanXORExpressionContext = BooleanXORExpressionContext;

FormulaParser.prototype.booleanXORExpression = function() {

    var localctx = new BooleanXORExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, FormulaParser.RULE_booleanXORExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.booleanAndExpression();
        this.state = 306;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 302;
                this.match(FormulaParser.XOR);
                this.state = 303;
                this.booleanAndExpression();
            }
            this.state = 308;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanAndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_booleanAndExpression;
    return this;
}

BooleanAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanAndExpressionContext.prototype.constructor = BooleanAndExpressionContext;

BooleanAndExpressionContext.prototype.equalityExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EqualityExpressionContext);
    } else {
        return this.getTypedRuleContext(EqualityExpressionContext,i);
    }
};

BooleanAndExpressionContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.AND);
    } else {
        return this.getToken(FormulaParser.AND, i);
    }
};


BooleanAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterBooleanAndExpression(this);
	}
};

BooleanAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitBooleanAndExpression(this);
	}
};




FormulaParser.BooleanAndExpressionContext = BooleanAndExpressionContext;

FormulaParser.prototype.booleanAndExpression = function() {

    var localctx = new BooleanAndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, FormulaParser.RULE_booleanAndExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 309;
        this.equalityExpression();
        this.state = 314;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,34,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 310;
                this.match(FormulaParser.AND);
                this.state = 311;
                this.equalityExpression();
            }
            this.state = 316;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,34,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EqualityExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_equalityExpression;
    return this;
}

EqualityExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

EqualityExpressionContext.prototype.relationalExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RelationalExpressionContext);
    } else {
        return this.getTypedRuleContext(RelationalExpressionContext,i);
    }
};

EqualityExpressionContext.prototype.EQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.EQUALS);
    } else {
        return this.getToken(FormulaParser.EQUALS, i);
    }
};


EqualityExpressionContext.prototype.NOTEQUALS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NOTEQUALS);
    } else {
        return this.getToken(FormulaParser.NOTEQUALS, i);
    }
};


EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitEqualityExpression(this);
	}
};




FormulaParser.EqualityExpressionContext = EqualityExpressionContext;

FormulaParser.prototype.equalityExpression = function() {

    var localctx = new EqualityExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, FormulaParser.RULE_equalityExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 317;
        this.relationalExpression();
        this.state = 322;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 318;
                _la = this._input.LA(1);
                if(!(_la===FormulaParser.EQUALS || _la===FormulaParser.NOTEQUALS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 319;
                this.relationalExpression();
            }
            this.state = 324;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RelationalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_relationalExpression;
    return this;
}

RelationalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

RelationalExpressionContext.prototype.additiveExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AdditiveExpressionContext);
    } else {
        return this.getTypedRuleContext(AdditiveExpressionContext,i);
    }
};

RelationalExpressionContext.prototype.LT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.LT);
    } else {
        return this.getToken(FormulaParser.LT, i);
    }
};


RelationalExpressionContext.prototype.LTEQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.LTEQ);
    } else {
        return this.getToken(FormulaParser.LTEQ, i);
    }
};


RelationalExpressionContext.prototype.GT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.GT);
    } else {
        return this.getToken(FormulaParser.GT, i);
    }
};


RelationalExpressionContext.prototype.GTEQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.GTEQ);
    } else {
        return this.getToken(FormulaParser.GTEQ, i);
    }
};


RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitRelationalExpression(this);
	}
};




FormulaParser.RelationalExpressionContext = RelationalExpressionContext;

FormulaParser.prototype.relationalExpression = function() {

    var localctx = new RelationalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, FormulaParser.RULE_relationalExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.additiveExpression();
        this.state = 330;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 326;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FormulaParser.LT) | (1 << FormulaParser.LTEQ) | (1 << FormulaParser.GT) | (1 << FormulaParser.GTEQ))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 327;
                this.additiveExpression();
            }
            this.state = 332;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
    } else {
        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
    }
};

AdditiveExpressionContext.prototype.PLUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.PLUS);
    } else {
        return this.getToken(FormulaParser.PLUS, i);
    }
};


AdditiveExpressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.MINUS);
    } else {
        return this.getToken(FormulaParser.MINUS, i);
    }
};


AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitAdditiveExpression(this);
	}
};




FormulaParser.AdditiveExpressionContext = AdditiveExpressionContext;

FormulaParser.prototype.additiveExpression = function() {

    var localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, FormulaParser.RULE_additiveExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.multiplicativeExpression();
        this.state = 338;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 334;
                _la = this._input.LA(1);
                if(!(_la===FormulaParser.PLUS || _la===FormulaParser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 335;
                this.multiplicativeExpression();
            }
            this.state = 340;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.arrayExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayExpressionContext);
    } else {
        return this.getTypedRuleContext(ArrayExpressionContext,i);
    }
};

MultiplicativeExpressionContext.prototype.MULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.MULT);
    } else {
        return this.getToken(FormulaParser.MULT, i);
    }
};


MultiplicativeExpressionContext.prototype.DIV = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.DIV);
    } else {
        return this.getToken(FormulaParser.DIV, i);
    }
};


MultiplicativeExpressionContext.prototype.MOD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.MOD);
    } else {
        return this.getToken(FormulaParser.MOD, i);
    }
};


MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};




FormulaParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

FormulaParser.prototype.multiplicativeExpression = function() {

    var localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, FormulaParser.RULE_multiplicativeExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 341;
        this.arrayExpression();
        this.state = 346;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,38,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 342;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FormulaParser.MULT) | (1 << FormulaParser.DIV) | (1 << FormulaParser.MOD))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
                this.state = 343;
                this.arrayExpression();
            }
            this.state = 348;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,38,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_arrayExpression;
    return this;
}

ArrayExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayExpressionContext.prototype.constructor = ArrayExpressionContext;

ArrayExpressionContext.prototype.negationExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NegationExpressionContext);
    } else {
        return this.getTypedRuleContext(NegationExpressionContext,i);
    }
};

ArrayExpressionContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.COLON);
    } else {
        return this.getToken(FormulaParser.COLON, i);
    }
};


ArrayExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterArrayExpression(this);
	}
};

ArrayExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitArrayExpression(this);
	}
};




FormulaParser.ArrayExpressionContext = ArrayExpressionContext;

FormulaParser.prototype.arrayExpression = function() {

    var localctx = new ArrayExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, FormulaParser.RULE_arrayExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 349;
        this.negationExpression();
        this.state = 352;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 350;
            this.match(FormulaParser.COLON);
            this.state = 351;
            this.negationExpression();

        }
        this.state = 356;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
        if(la_===1) {
            this.state = 354;
            this.match(FormulaParser.COLON);
            this.state = 355;
            this.negationExpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NegationExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_negationExpression;
    return this;
}

NegationExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NegationExpressionContext.prototype.constructor = NegationExpressionContext;

NegationExpressionContext.prototype.MINUS = function() {
    return this.getToken(FormulaParser.MINUS, 0);
};

NegationExpressionContext.prototype.powerExpression = function() {
    return this.getTypedRuleContext(PowerExpressionContext,0);
};

NegationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterNegationExpression(this);
	}
};

NegationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitNegationExpression(this);
	}
};




FormulaParser.NegationExpressionContext = NegationExpressionContext;

FormulaParser.prototype.negationExpression = function() {

    var localctx = new NegationExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, FormulaParser.RULE_negationExpression);
    try {
        this.state = 361;
        switch(this._input.LA(1)) {
        case FormulaParser.MINUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 358;
            this.match(FormulaParser.MINUS);
            this.state = 359;
            this.powerExpression();
            break;
        case FormulaParser.T__0:
        case FormulaParser.FUNCTIONSTATEMENT:
        case FormulaParser.NEWSTATEMENT:
        case FormulaParser.NOT:
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
        case FormulaParser.INTEGER:
        case FormulaParser.FLOAT:
        case FormulaParser.TRUE:
        case FormulaParser.FALSE:
        case FormulaParser.IDENT:
        case FormulaParser.PRIMITIVE:
        case FormulaParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 360;
            this.powerExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PowerExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_powerExpression;
    return this;
}

PowerExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerExpressionContext.prototype.constructor = PowerExpressionContext;

PowerExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

PowerExpressionContext.prototype.POW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.POW);
    } else {
        return this.getToken(FormulaParser.POW, i);
    }
};


PowerExpressionContext.prototype.unaryOrNegate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnaryOrNegateContext);
    } else {
        return this.getTypedRuleContext(UnaryOrNegateContext,i);
    }
};

PowerExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterPowerExpression(this);
	}
};

PowerExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitPowerExpression(this);
	}
};




FormulaParser.PowerExpressionContext = PowerExpressionContext;

FormulaParser.prototype.powerExpression = function() {

    var localctx = new PowerExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, FormulaParser.RULE_powerExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this.unaryExpression();
        this.state = 368;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,42,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 364;
                this.match(FormulaParser.POW);
                this.state = 365;
                this.unaryOrNegate();
            }
            this.state = 370;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,42,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryOrNegateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unaryOrNegate;
    return this;
}

UnaryOrNegateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOrNegateContext.prototype.constructor = UnaryOrNegateContext;

UnaryOrNegateContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryOrNegateContext.prototype.MINUS = function() {
    return this.getToken(FormulaParser.MINUS, 0);
};

UnaryOrNegateContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnaryOrNegate(this);
	}
};

UnaryOrNegateContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnaryOrNegate(this);
	}
};




FormulaParser.UnaryOrNegateContext = UnaryOrNegateContext;

FormulaParser.prototype.unaryOrNegate = function() {

    var localctx = new UnaryOrNegateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, FormulaParser.RULE_unaryOrNegate);
    try {
        this.state = 374;
        switch(this._input.LA(1)) {
        case FormulaParser.T__0:
        case FormulaParser.FUNCTIONSTATEMENT:
        case FormulaParser.NEWSTATEMENT:
        case FormulaParser.NOT:
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
        case FormulaParser.INTEGER:
        case FormulaParser.FLOAT:
        case FormulaParser.TRUE:
        case FormulaParser.FALSE:
        case FormulaParser.IDENT:
        case FormulaParser.PRIMITIVE:
        case FormulaParser.STRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 371;
            this.unaryExpression();
            break;
        case FormulaParser.MINUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 372;
            this.match(FormulaParser.MINUS);
            this.state = 373;
            this.unaryExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.NOT = function() {
    return this.getToken(FormulaParser.NOT, 0);
};

UnaryExpressionContext.prototype.innerPrimaryExpression = function() {
    return this.getTypedRuleContext(InnerPrimaryExpressionContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnaryExpression(this);
	}
};




FormulaParser.UnaryExpressionContext = UnaryExpressionContext;

FormulaParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, FormulaParser.RULE_unaryExpression);
    try {
        this.state = 379;
        switch(this._input.LA(1)) {
        case FormulaParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 376;
            this.match(FormulaParser.NOT);
            this.state = 377;
            this.innerPrimaryExpression();
            break;
        case FormulaParser.T__0:
        case FormulaParser.FUNCTIONSTATEMENT:
        case FormulaParser.NEWSTATEMENT:
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
        case FormulaParser.INTEGER:
        case FormulaParser.FLOAT:
        case FormulaParser.TRUE:
        case FormulaParser.FALSE:
        case FormulaParser.IDENT:
        case FormulaParser.PRIMITIVE:
        case FormulaParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 378;
            this.innerPrimaryExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerPrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_innerPrimaryExpression;
    return this;
}

InnerPrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerPrimaryExpressionContext.prototype.constructor = InnerPrimaryExpressionContext;

InnerPrimaryExpressionContext.prototype.selectionExpression = function() {
    return this.getTypedRuleContext(SelectionExpressionContext,0);
};

InnerPrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterInnerPrimaryExpression(this);
	}
};

InnerPrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitInnerPrimaryExpression(this);
	}
};




FormulaParser.InnerPrimaryExpressionContext = InnerPrimaryExpressionContext;

FormulaParser.prototype.innerPrimaryExpression = function() {

    var localctx = new InnerPrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, FormulaParser.RULE_innerPrimaryExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 381;
        this.selectionExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectionExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_selectionExpression;
    return this;
}

SelectionExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionExpressionContext.prototype.constructor = SelectionExpressionContext;

SelectionExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

SelectionExpressionContext.prototype.selector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectorContext);
    } else {
        return this.getTypedRuleContext(SelectorContext,i);
    }
};

SelectionExpressionContext.prototype.funCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FunCallContext);
    } else {
        return this.getTypedRuleContext(FunCallContext,i);
    }
};

SelectionExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterSelectionExpression(this);
	}
};

SelectionExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitSelectionExpression(this);
	}
};




FormulaParser.SelectionExpressionContext = SelectionExpressionContext;

FormulaParser.prototype.selectionExpression = function() {

    var localctx = new SelectionExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, FormulaParser.RULE_selectionExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 383;
        this.primaryExpression();
        this.state = 390;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 386;
                switch(this._input.LA(1)) {
                case FormulaParser.T__3:
                case FormulaParser.LARR:
                case FormulaParser.LCURL:
                    this.state = 384;
                    this.selector();
                    break;
                case FormulaParser.T__0:
                    this.state = 385;
                    this.funCall();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
            }
            this.state = 392;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_funCall;
    return this;
}

FunCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunCallContext.prototype.constructor = FunCallContext;

FunCallContext.prototype.logicalExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogicalExpressionContext);
    } else {
        return this.getTypedRuleContext(LogicalExpressionContext,i);
    }
};

FunCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterFunCall(this);
	}
};

FunCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitFunCall(this);
	}
};




FormulaParser.FunCallContext = FunCallContext;

FormulaParser.prototype.funCall = function() {

    var localctx = new FunCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, FormulaParser.RULE_funCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this.match(FormulaParser.T__0);
        this.state = 402;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FormulaParser.T__0) | (1 << FormulaParser.FUNCTIONSTATEMENT) | (1 << FormulaParser.NEWSTATEMENT) | (1 << FormulaParser.MINUS) | (1 << FormulaParser.NOT) | (1 << FormulaParser.LARR))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FormulaParser.LCURL - 32)) | (1 << (FormulaParser.INTEGER - 32)) | (1 << (FormulaParser.FLOAT - 32)) | (1 << (FormulaParser.TRUE - 32)) | (1 << (FormulaParser.FALSE - 32)) | (1 << (FormulaParser.IDENT - 32)) | (1 << (FormulaParser.PRIMITIVE - 32)) | (1 << (FormulaParser.STRING - 32)))) !== 0)) {
            this.state = 394;
            this.logicalExpression();
            this.state = 399;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.COMMA) {
                this.state = 395;
                this.match(FormulaParser.COMMA);
                this.state = 396;
                this.logicalExpression();
                this.state = 401;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 404;
        this.match(FormulaParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.logicalExpression = function() {
    return this.getTypedRuleContext(LogicalExpressionContext,0);
};

PrimaryExpressionContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitPrimaryExpression(this);
	}
};




FormulaParser.PrimaryExpressionContext = PrimaryExpressionContext;

FormulaParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, FormulaParser.RULE_primaryExpression);
    try {
        this.state = 411;
        switch(this._input.LA(1)) {
        case FormulaParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 406;
            this.match(FormulaParser.T__0);
            this.state = 407;
            this.logicalExpression();
            this.state = 408;
            this.match(FormulaParser.T__1);
            break;
        case FormulaParser.FUNCTIONSTATEMENT:
        case FormulaParser.NEWSTATEMENT:
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
        case FormulaParser.INTEGER:
        case FormulaParser.FLOAT:
        case FormulaParser.TRUE:
        case FormulaParser.FALSE:
        case FormulaParser.IDENT:
        case FormulaParser.PRIMITIVE:
        case FormulaParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 410;
            this.value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

ValueContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

ValueContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

ValueContext.prototype.material = function() {
    return this.getTypedRuleContext(MaterialContext,0);
};

ValueContext.prototype.IDENT = function() {
    return this.getToken(FormulaParser.IDENT, 0);
};

ValueContext.prototype.primitive = function() {
    return this.getTypedRuleContext(PrimitiveContext,0);
};

ValueContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

ValueContext.prototype.anonFunctionDef = function() {
    return this.getTypedRuleContext(AnonFunctionDefContext,0);
};

ValueContext.prototype.newObject = function() {
    return this.getTypedRuleContext(NewObjectContext,0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitValue(this);
	}
};




FormulaParser.ValueContext = ValueContext;

FormulaParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, FormulaParser.RULE_value);
    try {
        this.state = 422;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 413;
            this.number();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 414;
            this.bool();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 415;
            this.string();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 416;
            this.material();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 417;
            this.match(FormulaParser.IDENT);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 418;
            this.primitive();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 419;
            this.array();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 420;
            this.anonFunctionDef();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 421;
            this.newObject();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NewObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_newObject;
    return this;
}

NewObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NewObjectContext.prototype.constructor = NewObjectContext;

NewObjectContext.prototype.NEWSTATEMENT = function() {
    return this.getToken(FormulaParser.NEWSTATEMENT, 0);
};

NewObjectContext.prototype.IDENT = function() {
    return this.getToken(FormulaParser.IDENT, 0);
};

NewObjectContext.prototype.funCall = function() {
    return this.getTypedRuleContext(FunCallContext,0);
};

NewObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterNewObject(this);
	}
};

NewObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitNewObject(this);
	}
};




FormulaParser.NewObjectContext = NewObjectContext;

FormulaParser.prototype.newObject = function() {

    var localctx = new NewObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, FormulaParser.RULE_newObject);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 424;
        this.match(FormulaParser.NEWSTATEMENT);
        this.state = 425;
        this.match(FormulaParser.IDENT);
        this.state = 427;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        if(la_===1) {
            this.state = 426;
            this.funCall();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefaultValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_defaultValue;
    return this;
}

DefaultValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefaultValueContext.prototype.constructor = DefaultValueContext;

DefaultValueContext.prototype.negnumber = function() {
    return this.getTypedRuleContext(NegnumberContext,0);
};

DefaultValueContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

DefaultValueContext.prototype.bool = function() {
    return this.getTypedRuleContext(BoolContext,0);
};

DefaultValueContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

DefaultValueContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

DefaultValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterDefaultValue(this);
	}
};

DefaultValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitDefaultValue(this);
	}
};




FormulaParser.DefaultValueContext = DefaultValueContext;

FormulaParser.prototype.defaultValue = function() {

    var localctx = new DefaultValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, FormulaParser.RULE_defaultValue);
    try {
        this.state = 434;
        switch(this._input.LA(1)) {
        case FormulaParser.MINUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 429;
            this.negnumber();
            break;
        case FormulaParser.INTEGER:
        case FormulaParser.FLOAT:
            this.enterOuterAlt(localctx, 2);
            this.state = 430;
            this.number();
            break;
        case FormulaParser.TRUE:
        case FormulaParser.FALSE:
            this.enterOuterAlt(localctx, 3);
            this.state = 431;
            this.bool();
            break;
        case FormulaParser.STRING:
            this.enterOuterAlt(localctx, 4);
            this.state = 432;
            this.string();
            break;
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
            this.enterOuterAlt(localctx, 5);
            this.state = 433;
            this.array();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.LARR = function() {
    return this.getToken(FormulaParser.LARR, 0);
};

ArrayContext.prototype.RARR = function() {
    return this.getToken(FormulaParser.RARR, 0);
};

ArrayContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


ArrayContext.prototype.label = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LabelContext);
    } else {
        return this.getTypedRuleContext(LabelContext,i);
    }
};

ArrayContext.prototype.LCURL = function() {
    return this.getToken(FormulaParser.LCURL, 0);
};

ArrayContext.prototype.RCURL = function() {
    return this.getToken(FormulaParser.RCURL, 0);
};

ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitArray(this);
	}
};




FormulaParser.ArrayContext = ArrayContext;

FormulaParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, FormulaParser.RULE_array);
    var _la = 0; // Token type
    try {
        this.state = 520;
        switch(this._input.LA(1)) {
        case FormulaParser.LARR:
            this.enterOuterAlt(localctx, 1);
            this.state = 436;
            this.match(FormulaParser.LARR);
            this.state = 440;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 437;
                    this.match(FormulaParser.NEWLINE);
                }
                this.state = 442;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
            }

            this.state = 469;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 443;
                this.label();
                this.state = 447;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 444;
                        this.match(FormulaParser.NEWLINE);
                    }
                    this.state = 449;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
                }

                this.state = 466;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FormulaParser.COMMA) {
                    this.state = 450;
                    this.match(FormulaParser.COMMA);
                    this.state = 454;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 451;
                            this.match(FormulaParser.NEWLINE);
                        }
                        this.state = 456;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
                    }

                    this.state = 457;
                    this.label();
                    this.state = 461;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 458;
                            this.match(FormulaParser.NEWLINE);
                        }
                        this.state = 463;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
                    }

                    this.state = 468;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            this.state = 474;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.NEWLINE) {
                this.state = 471;
                this.match(FormulaParser.NEWLINE);
                this.state = 476;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 477;
            this.match(FormulaParser.RARR);
            break;
        case FormulaParser.LCURL:
            this.enterOuterAlt(localctx, 2);
            this.state = 478;
            this.match(FormulaParser.LCURL);
            this.state = 482;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,60,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 479;
                    this.match(FormulaParser.NEWLINE);
                }
                this.state = 484;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,60,this._ctx);
            }

            this.state = 511;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
            if(la_===1) {
                this.state = 485;
                this.label();
                this.state = 489;
                this._errHandler.sync(this);
                var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                    if(_alt===1) {
                        this.state = 486;
                        this.match(FormulaParser.NEWLINE);
                    }
                    this.state = 491;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
                }

                this.state = 508;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===FormulaParser.COMMA) {
                    this.state = 492;
                    this.match(FormulaParser.COMMA);
                    this.state = 496;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 493;
                            this.match(FormulaParser.NEWLINE);
                        }
                        this.state = 498;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
                    }

                    this.state = 499;
                    this.label();
                    this.state = 503;
                    this._errHandler.sync(this);
                    var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
                    while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                        if(_alt===1) {
                            this.state = 500;
                            this.match(FormulaParser.NEWLINE);
                        }
                        this.state = 505;
                        this._errHandler.sync(this);
                        _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
                    }

                    this.state = 510;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }

            }
            this.state = 516;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.NEWLINE) {
                this.state = 513;
                this.match(FormulaParser.NEWLINE);
                this.state = 518;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 519;
            this.match(FormulaParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_selector;
    return this;
}

SelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorContext.prototype.constructor = SelectorContext;

SelectorContext.prototype.minarray = function() {
    return this.getTypedRuleContext(MinarrayContext,0);
};

SelectorContext.prototype.dotselector = function() {
    return this.getTypedRuleContext(DotselectorContext,0);
};

SelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterSelector(this);
	}
};

SelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitSelector(this);
	}
};




FormulaParser.SelectorContext = SelectorContext;

FormulaParser.prototype.selector = function() {

    var localctx = new SelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, FormulaParser.RULE_selector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 524;
        switch(this._input.LA(1)) {
        case FormulaParser.LARR:
        case FormulaParser.LCURL:
            this.state = 522;
            this.minarray();
            break;
        case FormulaParser.T__3:
            this.state = 523;
            this.dotselector();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MinarrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_minarray;
    return this;
}

MinarrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MinarrayContext.prototype.constructor = MinarrayContext;

MinarrayContext.prototype.LARR = function() {
    return this.getToken(FormulaParser.LARR, 0);
};

MinarrayContext.prototype.RARR = function() {
    return this.getToken(FormulaParser.RARR, 0);
};

MinarrayContext.prototype.logicalExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogicalExpressionContext);
    } else {
        return this.getTypedRuleContext(LogicalExpressionContext,i);
    }
};

MinarrayContext.prototype.MULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.MULT);
    } else {
        return this.getToken(FormulaParser.MULT, i);
    }
};


MinarrayContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.COMMA);
    } else {
        return this.getToken(FormulaParser.COMMA, i);
    }
};


MinarrayContext.prototype.LCURL = function() {
    return this.getToken(FormulaParser.LCURL, 0);
};

MinarrayContext.prototype.RCURL = function() {
    return this.getToken(FormulaParser.RCURL, 0);
};

MinarrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterMinarray(this);
	}
};

MinarrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitMinarray(this);
	}
};




FormulaParser.MinarrayContext = MinarrayContext;

FormulaParser.prototype.minarray = function() {

    var localctx = new MinarrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, FormulaParser.RULE_minarray);
    var _la = 0; // Token type
    try {
        this.state = 558;
        switch(this._input.LA(1)) {
        case FormulaParser.LARR:
            this.enterOuterAlt(localctx, 1);
            this.state = 526;
            this.match(FormulaParser.LARR);
            this.state = 529;
            switch(this._input.LA(1)) {
            case FormulaParser.T__0:
            case FormulaParser.FUNCTIONSTATEMENT:
            case FormulaParser.NEWSTATEMENT:
            case FormulaParser.MINUS:
            case FormulaParser.NOT:
            case FormulaParser.LARR:
            case FormulaParser.LCURL:
            case FormulaParser.INTEGER:
            case FormulaParser.FLOAT:
            case FormulaParser.TRUE:
            case FormulaParser.FALSE:
            case FormulaParser.IDENT:
            case FormulaParser.PRIMITIVE:
            case FormulaParser.STRING:
                this.state = 527;
                this.logicalExpression();
                break;
            case FormulaParser.MULT:
                this.state = 528;
                this.match(FormulaParser.MULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.COMMA) {
                this.state = 531;
                this.match(FormulaParser.COMMA);
                this.state = 534;
                switch(this._input.LA(1)) {
                case FormulaParser.T__0:
                case FormulaParser.FUNCTIONSTATEMENT:
                case FormulaParser.NEWSTATEMENT:
                case FormulaParser.MINUS:
                case FormulaParser.NOT:
                case FormulaParser.LARR:
                case FormulaParser.LCURL:
                case FormulaParser.INTEGER:
                case FormulaParser.FLOAT:
                case FormulaParser.TRUE:
                case FormulaParser.FALSE:
                case FormulaParser.IDENT:
                case FormulaParser.PRIMITIVE:
                case FormulaParser.STRING:
                    this.state = 532;
                    this.logicalExpression();
                    break;
                case FormulaParser.MULT:
                    this.state = 533;
                    this.match(FormulaParser.MULT);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 540;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 541;
            this.match(FormulaParser.RARR);
            break;
        case FormulaParser.LCURL:
            this.enterOuterAlt(localctx, 2);
            this.state = 542;
            this.match(FormulaParser.LCURL);
            this.state = 545;
            switch(this._input.LA(1)) {
            case FormulaParser.T__0:
            case FormulaParser.FUNCTIONSTATEMENT:
            case FormulaParser.NEWSTATEMENT:
            case FormulaParser.MINUS:
            case FormulaParser.NOT:
            case FormulaParser.LARR:
            case FormulaParser.LCURL:
            case FormulaParser.INTEGER:
            case FormulaParser.FLOAT:
            case FormulaParser.TRUE:
            case FormulaParser.FALSE:
            case FormulaParser.IDENT:
            case FormulaParser.PRIMITIVE:
            case FormulaParser.STRING:
                this.state = 543;
                this.logicalExpression();
                break;
            case FormulaParser.MULT:
                this.state = 544;
                this.match(FormulaParser.MULT);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 554;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.COMMA) {
                this.state = 547;
                this.match(FormulaParser.COMMA);
                this.state = 550;
                switch(this._input.LA(1)) {
                case FormulaParser.T__0:
                case FormulaParser.FUNCTIONSTATEMENT:
                case FormulaParser.NEWSTATEMENT:
                case FormulaParser.MINUS:
                case FormulaParser.NOT:
                case FormulaParser.LARR:
                case FormulaParser.LCURL:
                case FormulaParser.INTEGER:
                case FormulaParser.FLOAT:
                case FormulaParser.TRUE:
                case FormulaParser.FALSE:
                case FormulaParser.IDENT:
                case FormulaParser.PRIMITIVE:
                case FormulaParser.STRING:
                    this.state = 548;
                    this.logicalExpression();
                    break;
                case FormulaParser.MULT:
                    this.state = 549;
                    this.match(FormulaParser.MULT);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 556;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 557;
            this.match(FormulaParser.RCURL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DotselectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_dotselector;
    return this;
}

DotselectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DotselectorContext.prototype.constructor = DotselectorContext;

DotselectorContext.prototype.arrayName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayNameContext);
    } else {
        return this.getTypedRuleContext(ArrayNameContext,i);
    }
};

DotselectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterDotselector(this);
	}
};

DotselectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitDotselector(this);
	}
};




FormulaParser.DotselectorContext = DotselectorContext;

FormulaParser.prototype.dotselector = function() {

    var localctx = new DotselectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, FormulaParser.RULE_dotselector);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 560;
        		this.match(FormulaParser.T__3);
        		this.state = 561;
        		this.arrayName();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 564;
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,76, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_arrayName;
    return this;
}

ArrayNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayNameContext.prototype.constructor = ArrayNameContext;

ArrayNameContext.prototype.IDENT = function() {
    return this.getToken(FormulaParser.IDENT, 0);
};

ArrayNameContext.prototype.STRING = function() {
    return this.getToken(FormulaParser.STRING, 0);
};

ArrayNameContext.prototype.MULT = function() {
    return this.getToken(FormulaParser.MULT, 0);
};

ArrayNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterArrayName(this);
	}
};

ArrayNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitArrayName(this);
	}
};




FormulaParser.ArrayNameContext = ArrayNameContext;

FormulaParser.prototype.arrayName = function() {

    var localctx = new ArrayNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, FormulaParser.RULE_arrayName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 566;
        _la = this._input.LA(1);
        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (FormulaParser.MULT - 25)) | (1 << (FormulaParser.IDENT - 25)) | (1 << (FormulaParser.STRING - 25)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_label;
    return this;
}

LabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelContext.prototype.constructor = LabelContext;

LabelContext.prototype.logicalExpression = function() {
    return this.getTypedRuleContext(LogicalExpressionContext,0);
};

LabelContext.prototype.arrayName = function() {
    return this.getTypedRuleContext(ArrayNameContext,0);
};

LabelContext.prototype.COLON = function() {
    return this.getToken(FormulaParser.COLON, 0);
};

LabelContext.prototype.NEWLINE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.NEWLINE);
    } else {
        return this.getToken(FormulaParser.NEWLINE, i);
    }
};


LabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterLabel(this);
	}
};

LabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitLabel(this);
	}
};




FormulaParser.LabelContext = LabelContext;

FormulaParser.prototype.label = function() {

    var localctx = new LabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, FormulaParser.RULE_label);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        if(la_===1) {
            this.state = 568;
            this.arrayName();
            this.state = 572;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.NEWLINE) {
                this.state = 569;
                this.match(FormulaParser.NEWLINE);
                this.state = 574;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 575;
            this.match(FormulaParser.COLON);

        }
        this.state = 582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FormulaParser.NEWLINE) {
            this.state = 579;
            this.match(FormulaParser.NEWLINE);
            this.state = 584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 585;
        this.logicalExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.INTEGER = function() {
    return this.getToken(FormulaParser.INTEGER, 0);
};

NumberContext.prototype.FLOAT = function() {
    return this.getToken(FormulaParser.FLOAT, 0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterNumber(this);
	}
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitNumber(this);
	}
};




FormulaParser.NumberContext = NumberContext;

FormulaParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, FormulaParser.RULE_number);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 587;
        _la = this._input.LA(1);
        if(!(_la===FormulaParser.INTEGER || _la===FormulaParser.FLOAT)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NegnumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_negnumber;
    return this;
}

NegnumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NegnumberContext.prototype.constructor = NegnumberContext;

NegnumberContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

NegnumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterNegnumber(this);
	}
};

NegnumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitNegnumber(this);
	}
};




FormulaParser.NegnumberContext = NegnumberContext;

FormulaParser.prototype.negnumber = function() {

    var localctx = new NegnumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, FormulaParser.RULE_negnumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(FormulaParser.MINUS);
        this.state = 590;
        this.number();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_bool;
    return this;
}

BoolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoolContext.prototype.constructor = BoolContext;

BoolContext.prototype.TRUE = function() {
    return this.getToken(FormulaParser.TRUE, 0);
};

BoolContext.prototype.FALSE = function() {
    return this.getToken(FormulaParser.FALSE, 0);
};

BoolContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterBool(this);
	}
};

BoolContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitBool(this);
	}
};




FormulaParser.BoolContext = BoolContext;

FormulaParser.prototype.bool = function() {

    var localctx = new BoolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, FormulaParser.RULE_bool);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 592;
        _la = this._input.LA(1);
        if(!(_la===FormulaParser.TRUE || _la===FormulaParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaterialContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_material;
    return this;
}

MaterialContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaterialContext.prototype.constructor = MaterialContext;

MaterialContext.prototype.LCURL = function() {
    return this.getToken(FormulaParser.LCURL, 0);
};

MaterialContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

MaterialContext.prototype.unitMultiplicativeExpression = function() {
    return this.getTypedRuleContext(UnitMultiplicativeExpressionContext,0);
};

MaterialContext.prototype.RCURL = function() {
    return this.getToken(FormulaParser.RCURL, 0);
};

MaterialContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterMaterial(this);
	}
};

MaterialContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitMaterial(this);
	}
};




FormulaParser.MaterialContext = MaterialContext;

FormulaParser.prototype.material = function() {

    var localctx = new MaterialContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, FormulaParser.RULE_material);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(FormulaParser.LCURL);
        this.state = 595;
        this.additiveExpression();
        this.state = 596;
        this.unitMultiplicativeExpression();
        this.state = 597;
        this.match(FormulaParser.RCURL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnitMultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unitMultiplicativeExpression;
    return this;
}

UnitMultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitMultiplicativeExpressionContext.prototype.constructor = UnitMultiplicativeExpressionContext;

UnitMultiplicativeExpressionContext.prototype.unitInnerMultiplicativeExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnitInnerMultiplicativeExpressionContext);
    } else {
        return this.getTypedRuleContext(UnitInnerMultiplicativeExpressionContext,i);
    }
};

UnitMultiplicativeExpressionContext.prototype.PER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.PER);
    } else {
        return this.getToken(FormulaParser.PER, i);
    }
};


UnitMultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnitMultiplicativeExpression(this);
	}
};

UnitMultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnitMultiplicativeExpression(this);
	}
};




FormulaParser.UnitMultiplicativeExpressionContext = UnitMultiplicativeExpressionContext;

FormulaParser.prototype.unitMultiplicativeExpression = function() {

    var localctx = new UnitMultiplicativeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, FormulaParser.RULE_unitMultiplicativeExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 599;
        this.unitInnerMultiplicativeExpression();
        this.state = 604;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FormulaParser.PER) {
            this.state = 600;
            this.match(FormulaParser.PER);
            this.state = 601;
            this.unitInnerMultiplicativeExpression();
            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnitInnerMultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unitInnerMultiplicativeExpression;
    return this;
}

UnitInnerMultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitInnerMultiplicativeExpressionContext.prototype.constructor = UnitInnerMultiplicativeExpressionContext;

UnitInnerMultiplicativeExpressionContext.prototype.unitClump = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnitClumpContext);
    } else {
        return this.getTypedRuleContext(UnitClumpContext,i);
    }
};

UnitInnerMultiplicativeExpressionContext.prototype.MULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.MULT);
    } else {
        return this.getToken(FormulaParser.MULT, i);
    }
};


UnitInnerMultiplicativeExpressionContext.prototype.DIV = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.DIV);
    } else {
        return this.getToken(FormulaParser.DIV, i);
    }
};


UnitInnerMultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnitInnerMultiplicativeExpression(this);
	}
};

UnitInnerMultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnitInnerMultiplicativeExpression(this);
	}
};




FormulaParser.UnitInnerMultiplicativeExpressionContext = UnitInnerMultiplicativeExpressionContext;

FormulaParser.prototype.unitInnerMultiplicativeExpression = function() {

    var localctx = new UnitInnerMultiplicativeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, FormulaParser.RULE_unitInnerMultiplicativeExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.unitClump();
        this.state = 612;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FormulaParser.MULT || _la===FormulaParser.DIV) {
            this.state = 608;
            _la = this._input.LA(1);
            if(!(_la===FormulaParser.MULT || _la===FormulaParser.DIV)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 609;
            this.unitClump();
            this.state = 614;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnitClumpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unitClump;
    return this;
}

UnitClumpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitClumpContext.prototype.constructor = UnitClumpContext;

UnitClumpContext.prototype.unitPowerExpression = function() {
    return this.getTypedRuleContext(UnitPowerExpressionContext,0);
};

UnitClumpContext.prototype.INTEGER = function() {
    return this.getToken(FormulaParser.INTEGER, 0);
};

UnitClumpContext.prototype.DIV = function() {
    return this.getToken(FormulaParser.DIV, 0);
};

UnitClumpContext.prototype.CUBED = function() {
    return this.getToken(FormulaParser.CUBED, 0);
};

UnitClumpContext.prototype.SQUARED = function() {
    return this.getToken(FormulaParser.SQUARED, 0);
};

UnitClumpContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnitClump(this);
	}
};

UnitClumpContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnitClump(this);
	}
};




FormulaParser.UnitClumpContext = UnitClumpContext;

FormulaParser.prototype.unitClump = function() {

    var localctx = new UnitClumpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, FormulaParser.RULE_unitClump);
    var _la = 0; // Token type
    try {
        this.state = 632;
        switch(this._input.LA(1)) {
        case FormulaParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 615;
            this.match(FormulaParser.INTEGER);
            this.state = 616;
            this.match(FormulaParser.DIV);
            this.state = 618;
            this.unitPowerExpression();
            this.state = 620;
            _la = this._input.LA(1);
            if(_la===FormulaParser.CUBED) {
                this.state = 619;
                this.match(FormulaParser.CUBED);
            }

            this.state = 623;
            _la = this._input.LA(1);
            if(_la===FormulaParser.SQUARED) {
                this.state = 622;
                this.match(FormulaParser.SQUARED);
            }

            break;
        case FormulaParser.T__0:
        case FormulaParser.IDENT:
            this.enterOuterAlt(localctx, 2);
            this.state = 625;
            this.unitPowerExpression();
            this.state = 627;
            _la = this._input.LA(1);
            if(_la===FormulaParser.CUBED) {
                this.state = 626;
                this.match(FormulaParser.CUBED);
            }

            this.state = 630;
            _la = this._input.LA(1);
            if(_la===FormulaParser.SQUARED) {
                this.state = 629;
                this.match(FormulaParser.SQUARED);
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnitPowerExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unitPowerExpression;
    return this;
}

UnitPowerExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitPowerExpressionContext.prototype.constructor = UnitPowerExpressionContext;

UnitPowerExpressionContext.prototype.unit = function() {
    return this.getTypedRuleContext(UnitContext,0);
};

UnitPowerExpressionContext.prototype.POW = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.POW);
    } else {
        return this.getToken(FormulaParser.POW, i);
    }
};


UnitPowerExpressionContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.INTEGER);
    } else {
        return this.getToken(FormulaParser.INTEGER, i);
    }
};


UnitPowerExpressionContext.prototype.FLOAT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.FLOAT);
    } else {
        return this.getToken(FormulaParser.FLOAT, i);
    }
};


UnitPowerExpressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.MINUS);
    } else {
        return this.getToken(FormulaParser.MINUS, i);
    }
};


UnitPowerExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnitPowerExpression(this);
	}
};

UnitPowerExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnitPowerExpression(this);
	}
};




FormulaParser.UnitPowerExpressionContext = UnitPowerExpressionContext;

FormulaParser.prototype.unitPowerExpression = function() {

    var localctx = new UnitPowerExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, FormulaParser.RULE_unitPowerExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 634;
        this.unit();
        this.state = 642;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===FormulaParser.POW) {
            this.state = 635;
            this.match(FormulaParser.POW);
            this.state = 637;
            _la = this._input.LA(1);
            if(_la===FormulaParser.MINUS) {
                this.state = 636;
                this.match(FormulaParser.MINUS);
            }

            this.state = 639;
            _la = this._input.LA(1);
            if(!(_la===FormulaParser.INTEGER || _la===FormulaParser.FLOAT)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 644;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_unit;
    return this;
}

UnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnitContext.prototype.constructor = UnitContext;

UnitContext.prototype.IDENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(FormulaParser.IDENT);
    } else {
        return this.getToken(FormulaParser.IDENT, i);
    }
};


UnitContext.prototype.unitMultiplicativeExpression = function() {
    return this.getTypedRuleContext(UnitMultiplicativeExpressionContext,0);
};

UnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterUnit(this);
	}
};

UnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitUnit(this);
	}
};




FormulaParser.UnitContext = UnitContext;

FormulaParser.prototype.unit = function() {

    var localctx = new UnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, FormulaParser.RULE_unit);
    var _la = 0; // Token type
    try {
        this.state = 656;
        switch(this._input.LA(1)) {
        case FormulaParser.IDENT:
            this.enterOuterAlt(localctx, 1);
            this.state = 645;
            this.match(FormulaParser.IDENT);
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===FormulaParser.IDENT) {
                this.state = 646;
                this.match(FormulaParser.IDENT);
                this.state = 651;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case FormulaParser.T__0:
            this.enterOuterAlt(localctx, 2);
            this.state = 652;
            this.match(FormulaParser.T__0);
            this.state = 653;
            this.unitMultiplicativeExpression();
            this.state = 654;
            this.match(FormulaParser.T__1);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimitiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_primitive;
    return this;
}

PrimitiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimitiveContext.prototype.constructor = PrimitiveContext;

PrimitiveContext.prototype.PRIMITIVE = function() {
    return this.getToken(FormulaParser.PRIMITIVE, 0);
};

PrimitiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterPrimitive(this);
	}
};

PrimitiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitPrimitive(this);
	}
};




FormulaParser.PrimitiveContext = PrimitiveContext;

FormulaParser.prototype.primitive = function() {

    var localctx = new PrimitiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, FormulaParser.RULE_primitive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(FormulaParser.PRIMITIVE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = FormulaParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.STRING = function() {
    return this.getToken(FormulaParser.STRING, 0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof FormulaListener ) {
        listener.exitString(this);
	}
};




FormulaParser.StringContext = StringContext;

FormulaParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, FormulaParser.RULE_string);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 660;
        this.match(FormulaParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};



exports.FormulaParser = FormulaParser;
